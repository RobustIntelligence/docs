# Tests
## Model Performance

### Average Confidence
<p>This test checks the average confidence of the model predictions between the reference and evaluation sets to see if the metric has experienced significant degradation. The "confidence" of a prediction for classification tasks is defined as the distance between the probability of the predicted class (defined as the argmax over the prediction vector) and 1. We average this metric across all predictions.</p><p><b>Why it matters:</b> During production, factors like distribution shift or a change in <span>p(y|x)</span> may cause model performance to decrease significantly. Since oftentimes labels are not available in a production setting, this metric can serve as a useful proxy for model performance.</p><p><b>Configuration:</b> By default, this test runs if predictions are specified (no labels required).</p><p><b>Example:</b> Assume that on the reference set the model obtained <span>0.85</span> average confidence but on the evaluation set without labels we predict that the model obtained <span>0.5</span> average confidence. Then this test raises a warning.</p>

### Average Thresholded Confidence
<p>This test checks the average thresholded confidence (ATC) of the model predictions between the reference and evaluation sets to see if the metric has experienced significant degradation. ATC is a method for estimating accuracy of unlabeled examples taken from <a href="https://arxiv.org/abs/2201.04234">this paper</a>. The threshold is first computed on the reference set: we pick a confidence threshold such that the percentage of datapoints whose max predicted probability is less than the threshold is around equal to the error rate of the model (here, it is 1-accuracy) on the reference set. Then, we apply this threshold in the evaluation set: the predicted accuracy is then equal to the percentage of datapoints with max predicted probability greater than this threshold.</p><p><b>Why it matters:</b> During production, factors like distribution shift may cause model performance to decrease significantly. Since oftentimes labels are not available in a production setting, this metric can serve as a useful proxy for model performance.</p><p><b>Configuration:</b> By default, this test runs if predictions/labels are specified in the reference set and predictions are specified in the eval set (no labels required).</p><p><b>Example:</b> Assume that on the reference set the model obtained <span>0.85</span> accuracy but on the evaluation set, we find that only 55 percent of datapoints have max predicted probability greater than our threshold. Then our predicted accuracy is <span>0.55</span> and this test raises a warning.</p>

### Calibration Comparison
<p>This test checks that the reference and evaluation sets have sufficiently similar calibration curves as measured by the Mean Squared Error (MSE) between the two curves. The calibration curve is a line plot where the x-axis represents the average predicted probability and the y-axis is the proportion of positive predictions. The curve of the ideal calibrated model is thus a linear straight line from (0, 0) moving linearly.</p><p><b>Why it matters:</b> Knowing how well-calibrated your model is can help you better interpret and act upon model outputs, and can even be an indicator of generalization. A greater difference between reference and evaluation curves could indicate a lack of generalizability. In addition, a change in calibration could indicate that decision-making or thresholding conducted upstream needs to change as it is behaving differently on held-out data.</p><p><b>Configuration:</b> By default, this test runs over the predictions and labels.</p><p><b>Example:</b> Suppose the model’s task is binary classification and predicts whether or not a data point is fraudulent. If we have a reference set in which <span>1%</span> of the data points are fraudulent, but an evaluation set where <span>50%</span> are fraudulent, then our model may not be well calibrated, and the MSE difference in the curves will be large, resulting in a failing test.</p>

### Macro F1
<p>This test checks the Macro F1 metric to see both if its performance on the evaluation set alone is satisfactory, as well as if performance in terms of Macro F1 has degraded from the reference to evaluation set. The key detail displays whether the given performance metric has degraded beyond a defined threshold.</p><p><b>Why it matters:</b> During production, factors like distribution shift or a change in <span>p(y|x)</span> may cause model performance to decrease significantly.</p><p><b>Configuration:</b> By default, this test runs over the Macro F1 metric with the below thresholds set for the absolute and degradation tests.</p><p><b>Example:</b> Assume that on the reference set the model obtained <span>0.85</span> AUC but on the evaluation set the model obtained <span>0.5</span> AUC. Then this test raises a warning.</p>

### Root-Mean-Squared Error (RMSE)
<p>This test checks the Root-Mean-Squared Error (RMSE) metric to see both if its performance on the evaluation set alone is satisfactory, as well as if performance in terms of Root-Mean-Squared Error (RMSE) has degraded from the reference to evaluation set. The key detail displays whether the given performance metric has degraded beyond a defined threshold.</p><p><b>Why it matters:</b> During production, factors like distribution shift or a change in <span>p(y|x)</span> may cause model performance to decrease significantly.</p><p><b>Configuration:</b> By default, this test runs over the Root-Mean-Squared Error (RMSE) metric with the below thresholds set for the absolute and degradation tests.</p><p><b>Example:</b> Assume that on the reference set the model obtained <span>0.85</span> AUC but on the evaluation set the model obtained <span>0.5</span> AUC. Then this test raises a warning.</p>

### Prediction Variance
<p>This test checks the Prediction Variance metric to see both if its performance on the evaluation set alone is satisfactory, as well as if performance in terms of Prediction Variance has degraded from the reference to evaluation set. The key detail displays whether the given performance metric has degraded beyond a defined threshold.</p><p><b>Why it matters:</b> During production, factors like distribution shift or a change in <span>p(y|x)</span> may cause model performance to decrease significantly.</p><p><b>Configuration:</b> By default, this test runs over the Prediction Variance metric with the below thresholds set for the absolute and degradation tests.</p><p><b>Example:</b> Assume that on the reference set the model obtained <span>0.85</span> AUC but on the evaluation set the model obtained <span>0.5</span> AUC. Then this test raises a warning.</p>

### Multiclass Accuracy
<p>This test checks the Multiclass Accuracy metric to see both if its performance on the evaluation set alone is satisfactory, as well as if performance in terms of Multiclass Accuracy has degraded from the reference to evaluation set. The key detail displays whether the given performance metric has degraded beyond a defined threshold.</p><p><b>Why it matters:</b> During production, factors like distribution shift or a change in <span>p(y|x)</span> may cause model performance to decrease significantly.</p><p><b>Configuration:</b> By default, this test runs over the Multiclass Accuracy metric with the below thresholds set for the absolute and degradation tests.</p><p><b>Example:</b> Assume that on the reference set the model obtained <span>0.85</span> AUC but on the evaluation set the model obtained <span>0.5</span> AUC. Then this test raises a warning.</p>

### F1
<p>This test checks the F1 metric to see both if its performance on the evaluation set alone is satisfactory, as well as if performance in terms of F1 has degraded from the reference to evaluation set. The key detail displays whether the given performance metric has degraded beyond a defined threshold.</p><p><b>Why it matters:</b> During production, factors like distribution shift or a change in <span>p(y|x)</span> may cause model performance to decrease significantly.</p><p><b>Configuration:</b> By default, this test runs over the F1 metric with the below thresholds set for the absolute and degradation tests.</p><p><b>Example:</b> Assume that on the reference set the model obtained <span>0.85</span> AUC but on the evaluation set the model obtained <span>0.5</span> AUC. Then this test raises a warning.</p>

### Prediction Variance (Negative Labels)
<p>This test checks the Prediction Variance (Negative Labels) metric to see both if its performance on the evaluation set alone is satisfactory, as well as if performance in terms of Prediction Variance (Negative Labels) has degraded from the reference to evaluation set. The key detail displays whether the given performance metric has degraded beyond a defined threshold.</p><p><b>Why it matters:</b> During production, factors like distribution shift or a change in <span>p(y|x)</span> may cause model performance to decrease significantly.</p><p><b>Configuration:</b> By default, this test runs over the Prediction Variance (Negative Labels) metric with the below thresholds set for the absolute and degradation tests.</p><p><b>Example:</b> Assume that on the reference set the model obtained <span>0.85</span> AUC but on the evaluation set the model obtained <span>0.5</span> AUC. Then this test raises a warning.</p>

### Macro Recall
<p>This test checks the Macro Recall metric to see both if its performance on the evaluation set alone is satisfactory, as well as if performance in terms of Macro Recall has degraded from the reference to evaluation set. The key detail displays whether the given performance metric has degraded beyond a defined threshold.</p><p><b>Why it matters:</b> During production, factors like distribution shift or a change in <span>p(y|x)</span> may cause model performance to decrease significantly.</p><p><b>Configuration:</b> By default, this test runs over the Macro Recall metric with the below thresholds set for the absolute and degradation tests.</p><p><b>Example:</b> Assume that on the reference set the model obtained <span>0.85</span> AUC but on the evaluation set the model obtained <span>0.5</span> AUC. Then this test raises a warning.</p>

### False Positive Rate
<p>This test checks the False Positive Rate metric to see both if its performance on the evaluation set alone is satisfactory, as well as if performance in terms of False Positive Rate has degraded from the reference to evaluation set. The key detail displays whether the given performance metric has degraded beyond a defined threshold.</p><p><b>Why it matters:</b> During production, factors like distribution shift or a change in <span>p(y|x)</span> may cause model performance to decrease significantly.</p><p><b>Configuration:</b> By default, this test runs over the False Positive Rate metric with the below thresholds set for the absolute and degradation tests.</p><p><b>Example:</b> Assume that on the reference set the model obtained <span>0.85</span> AUC but on the evaluation set the model obtained <span>0.5</span> AUC. Then this test raises a warning.</p>

### F1
<p>This test checks the F1 metric to see both if its performance on the evaluation set alone is satisfactory, as well as if performance in terms of F1 has degraded from the reference to evaluation set. The key detail displays whether the given performance metric has degraded beyond a defined threshold.</p><p><b>Why it matters:</b> During production, factors like distribution shift or a change in <span>p(y|x)</span> may cause model performance to decrease significantly.</p><p><b>Configuration:</b> By default, this test runs over the F1 metric with the below thresholds set for the absolute and degradation tests.</p><p><b>Example:</b> Assume that on the reference set the model obtained <span>0.85</span> AUC but on the evaluation set the model obtained <span>0.5</span> AUC. Then this test raises a warning.</p>

### Accuracy
<p>This test checks the Accuracy metric to see both if its performance on the evaluation set alone is satisfactory, as well as if performance in terms of Accuracy has degraded from the reference to evaluation set. The key detail displays whether the given performance metric has degraded beyond a defined threshold.</p><p><b>Why it matters:</b> During production, factors like distribution shift or a change in <span>p(y|x)</span> may cause model performance to decrease significantly.</p><p><b>Configuration:</b> By default, this test runs over the Accuracy metric with the below thresholds set for the absolute and degradation tests.</p><p><b>Example:</b> Assume that on the reference set the model obtained <span>0.85</span> AUC but on the evaluation set the model obtained <span>0.5</span> AUC. Then this test raises a warning.</p>

### Precision
<p>This test checks the Precision metric to see both if its performance on the evaluation set alone is satisfactory, as well as if performance in terms of Precision has degraded from the reference to evaluation set. The key detail displays whether the given performance metric has degraded beyond a defined threshold.</p><p><b>Why it matters:</b> During production, factors like distribution shift or a change in <span>p(y|x)</span> may cause model performance to decrease significantly.</p><p><b>Configuration:</b> By default, this test runs over the Precision metric with the below thresholds set for the absolute and degradation tests.</p><p><b>Example:</b> Assume that on the reference set the model obtained <span>0.85</span> AUC but on the evaluation set the model obtained <span>0.5</span> AUC. Then this test raises a warning.</p>

### F1
<p>This test checks the F1 metric to see both if its performance on the evaluation set alone is satisfactory, as well as if performance in terms of F1 has degraded from the reference to evaluation set. The key detail displays whether the given performance metric has degraded beyond a defined threshold.</p><p><b>Why it matters:</b> During production, factors like distribution shift or a change in <span>p(y|x)</span> may cause model performance to decrease significantly.</p><p><b>Configuration:</b> By default, this test runs over the F1 metric with the below thresholds set for the absolute and degradation tests.</p><p><b>Example:</b> Assume that on the reference set the model obtained <span>0.85</span> AUC but on the evaluation set the model obtained <span>0.5</span> AUC. Then this test raises a warning.</p>

### Macro Precision
<p>This test checks the Macro Precision metric to see both if its performance on the evaluation set alone is satisfactory, as well as if performance in terms of Macro Precision has degraded from the reference to evaluation set. The key detail displays whether the given performance metric has degraded beyond a defined threshold.</p><p><b>Why it matters:</b> During production, factors like distribution shift or a change in <span>p(y|x)</span> may cause model performance to decrease significantly.</p><p><b>Configuration:</b> By default, this test runs over the Macro Precision metric with the below thresholds set for the absolute and degradation tests.</p><p><b>Example:</b> Assume that on the reference set the model obtained <span>0.85</span> AUC but on the evaluation set the model obtained <span>0.5</span> AUC. Then this test raises a warning.</p>

### Precision
<p>This test checks the Precision metric to see both if its performance on the evaluation set alone is satisfactory, as well as if performance in terms of Precision has degraded from the reference to evaluation set. The key detail displays whether the given performance metric has degraded beyond a defined threshold.</p><p><b>Why it matters:</b> During production, factors like distribution shift or a change in <span>p(y|x)</span> may cause model performance to decrease significantly.</p><p><b>Configuration:</b> By default, this test runs over the Precision metric with the below thresholds set for the absolute and degradation tests.</p><p><b>Example:</b> Assume that on the reference set the model obtained <span>0.85</span> AUC but on the evaluation set the model obtained <span>0.5</span> AUC. Then this test raises a warning.</p>

### Mean Reciprocal Rank (MRR)
<p>This test checks the Mean Reciprocal Rank (MRR) metric to see both if its performance on the evaluation set alone is satisfactory, as well as if performance in terms of Mean Reciprocal Rank (MRR) has degraded from the reference to evaluation set. The key detail displays whether the given performance metric has degraded beyond a defined threshold.</p><p><b>Why it matters:</b> During production, factors like distribution shift or a change in <span>p(y|x)</span> may cause model performance to decrease significantly.</p><p><b>Configuration:</b> By default, this test runs over the Mean Reciprocal Rank (MRR) metric with the below thresholds set for the absolute and degradation tests.</p><p><b>Example:</b> Assume that on the reference set the model obtained <span>0.85</span> AUC but on the evaluation set the model obtained <span>0.5</span> AUC. Then this test raises a warning.</p>

### Mean-Squared-Log Error (MSLE)
<p>This test checks the Mean-Squared-Log Error (MSLE) metric to see both if its performance on the evaluation set alone is satisfactory, as well as if performance in terms of Mean-Squared-Log Error (MSLE) has degraded from the reference to evaluation set. The key detail displays whether the given performance metric has degraded beyond a defined threshold.</p><p><b>Why it matters:</b> During production, factors like distribution shift or a change in <span>p(y|x)</span> may cause model performance to decrease significantly.</p><p><b>Configuration:</b> By default, this test runs over the Mean-Squared-Log Error (MSLE) metric with the below thresholds set for the absolute and degradation tests.</p><p><b>Example:</b> Assume that on the reference set the model obtained <span>0.85</span> AUC but on the evaluation set the model obtained <span>0.5</span> AUC. Then this test raises a warning.</p>

### Multiclass AUC
<p>This test checks the Multiclass AUC metric to see both if its performance on the evaluation set alone is satisfactory, as well as if performance in terms of Multiclass AUC has degraded from the reference to evaluation set. The key detail displays whether the given performance metric has degraded beyond a defined threshold.</p><p><b>Why it matters:</b> During production, factors like distribution shift or a change in <span>p(y|x)</span> may cause model performance to decrease significantly.</p><p><b>Configuration:</b> By default, this test runs over the Multiclass AUC metric with the below thresholds set for the absolute and degradation tests.</p><p><b>Example:</b> Assume that on the reference set the model obtained <span>0.85</span> AUC but on the evaluation set the model obtained <span>0.5</span> AUC. Then this test raises a warning.</p>

### Mean-Squared Error (MSE)
<p>This test checks the Mean-Squared Error (MSE) metric to see both if its performance on the evaluation set alone is satisfactory, as well as if performance in terms of Mean-Squared Error (MSE) has degraded from the reference to evaluation set. The key detail displays whether the given performance metric has degraded beyond a defined threshold.</p><p><b>Why it matters:</b> During production, factors like distribution shift or a change in <span>p(y|x)</span> may cause model performance to decrease significantly.</p><p><b>Configuration:</b> By default, this test runs over the Mean-Squared Error (MSE) metric with the below thresholds set for the absolute and degradation tests.</p><p><b>Example:</b> Assume that on the reference set the model obtained <span>0.85</span> AUC but on the evaluation set the model obtained <span>0.5</span> AUC. Then this test raises a warning.</p>

### Average Number of Predicted Entities
<p>This test checks the Average Number of Predicted Entities metric to see both if its performance on the evaluation set alone is satisfactory, as well as if performance in terms of Average Number of Predicted Entities has degraded from the reference to evaluation set. The key detail displays whether the given performance metric has degraded beyond a defined threshold.</p><p><b>Why it matters:</b> During production, factors like distribution shift or a change in <span>p(y|x)</span> may cause model performance to decrease significantly.</p><p><b>Configuration:</b> By default, this test runs over the Average Number of Predicted Entities metric with the below thresholds set for the absolute and degradation tests.</p><p><b>Example:</b> Assume that on the reference set the model obtained <span>0.85</span> AUC but on the evaluation set the model obtained <span>0.5</span> AUC. Then this test raises a warning.</p>

### AUC
<p>This test checks the AUC metric to see both if its performance on the evaluation set alone is satisfactory, as well as if performance in terms of AUC has degraded from the reference to evaluation set. The key detail displays whether the given performance metric has degraded beyond a defined threshold.</p><p><b>Why it matters:</b> During production, factors like distribution shift or a change in <span>p(y|x)</span> may cause model performance to decrease significantly.</p><p><b>Configuration:</b> By default, this test runs over the AUC metric with the below thresholds set for the absolute and degradation tests.</p><p><b>Example:</b> Assume that on the reference set the model obtained <span>0.85</span> AUC but on the evaluation set the model obtained <span>0.5</span> AUC. Then this test raises a warning.</p>

### Rank Correlation
<p>This test checks the Rank Correlation metric to see both if its performance on the evaluation set alone is satisfactory, as well as if performance in terms of Rank Correlation has degraded from the reference to evaluation set. The key detail displays whether the given performance metric has degraded beyond a defined threshold.</p><p><b>Why it matters:</b> During production, factors like distribution shift or a change in <span>p(y|x)</span> may cause model performance to decrease significantly.</p><p><b>Configuration:</b> By default, this test runs over the Rank Correlation metric with the below thresholds set for the absolute and degradation tests.</p><p><b>Example:</b> Assume that on the reference set the model obtained <span>0.85</span> AUC but on the evaluation set the model obtained <span>0.5</span> AUC. Then this test raises a warning.</p>

### Recall
<p>This test checks the Recall metric to see both if its performance on the evaluation set alone is satisfactory, as well as if performance in terms of Recall has degraded from the reference to evaluation set. The key detail displays whether the given performance metric has degraded beyond a defined threshold.</p><p><b>Why it matters:</b> During production, factors like distribution shift or a change in <span>p(y|x)</span> may cause model performance to decrease significantly.</p><p><b>Configuration:</b> By default, this test runs over the Recall metric with the below thresholds set for the absolute and degradation tests.</p><p><b>Example:</b> Assume that on the reference set the model obtained <span>0.85</span> AUC but on the evaluation set the model obtained <span>0.5</span> AUC. Then this test raises a warning.</p>

### Positive Prediction Rate
<p>This test checks the Positive Prediction Rate metric to see both if its performance on the evaluation set alone is satisfactory, as well as if performance in terms of Positive Prediction Rate has degraded from the reference to evaluation set. The key detail displays whether the given performance metric has degraded beyond a defined threshold.</p><p><b>Why it matters:</b> During production, factors like distribution shift or a change in <span>p(y|x)</span> may cause model performance to decrease significantly.</p><p><b>Configuration:</b> By default, this test runs over the Positive Prediction Rate metric with the below thresholds set for the absolute and degradation tests.</p><p><b>Example:</b> Assume that on the reference set the model obtained <span>0.85</span> AUC but on the evaluation set the model obtained <span>0.5</span> AUC. Then this test raises a warning.</p>

### Recall
<p>This test checks the Recall metric to see both if its performance on the evaluation set alone is satisfactory, as well as if performance in terms of Recall has degraded from the reference to evaluation set. The key detail displays whether the given performance metric has degraded beyond a defined threshold.</p><p><b>Why it matters:</b> During production, factors like distribution shift or a change in <span>p(y|x)</span> may cause model performance to decrease significantly.</p><p><b>Configuration:</b> By default, this test runs over the Recall metric with the below thresholds set for the absolute and degradation tests.</p><p><b>Example:</b> Assume that on the reference set the model obtained <span>0.85</span> AUC but on the evaluation set the model obtained <span>0.5</span> AUC. Then this test raises a warning.</p>

### Normalized Discounted Cumulative Gain (NDCG)
<p>This test checks the Normalized Discounted Cumulative Gain (NDCG) metric to see both if its performance on the evaluation set alone is satisfactory, as well as if performance in terms of Normalized Discounted Cumulative Gain (NDCG) has degraded from the reference to evaluation set. The key detail displays whether the given performance metric has degraded beyond a defined threshold.</p><p><b>Why it matters:</b> During production, factors like distribution shift or a change in <span>p(y|x)</span> may cause model performance to decrease significantly.</p><p><b>Configuration:</b> By default, this test runs over the Normalized Discounted Cumulative Gain (NDCG) metric with the below thresholds set for the absolute and degradation tests.</p><p><b>Example:</b> Assume that on the reference set the model obtained <span>0.85</span> AUC but on the evaluation set the model obtained <span>0.5</span> AUC. Then this test raises a warning.</p>

### Average Rank
<p>This test checks the Average Rank metric to see both if its performance on the evaluation set alone is satisfactory, as well as if performance in terms of Average Rank has degraded from the reference to evaluation set. The key detail displays whether the given performance metric has degraded beyond a defined threshold.</p><p><b>Why it matters:</b> During production, factors like distribution shift or a change in <span>p(y|x)</span> may cause model performance to decrease significantly.</p><p><b>Configuration:</b> By default, this test runs over the Average Rank metric with the below thresholds set for the absolute and degradation tests.</p><p><b>Example:</b> Assume that on the reference set the model obtained <span>0.85</span> AUC but on the evaluation set the model obtained <span>0.5</span> AUC. Then this test raises a warning.</p>

### Precision
<p>This test checks the Precision metric to see both if its performance on the evaluation set alone is satisfactory, as well as if performance in terms of Precision has degraded from the reference to evaluation set. The key detail displays whether the given performance metric has degraded beyond a defined threshold.</p><p><b>Why it matters:</b> During production, factors like distribution shift or a change in <span>p(y|x)</span> may cause model performance to decrease significantly.</p><p><b>Configuration:</b> By default, this test runs over the Precision metric with the below thresholds set for the absolute and degradation tests.</p><p><b>Example:</b> Assume that on the reference set the model obtained <span>0.85</span> AUC but on the evaluation set the model obtained <span>0.5</span> AUC. Then this test raises a warning.</p>

### Mean-Absolute Error (MAE)
<p>This test checks the Mean-Absolute Error (MAE) metric to see both if its performance on the evaluation set alone is satisfactory, as well as if performance in terms of Mean-Absolute Error (MAE) has degraded from the reference to evaluation set. The key detail displays whether the given performance metric has degraded beyond a defined threshold.</p><p><b>Why it matters:</b> During production, factors like distribution shift or a change in <span>p(y|x)</span> may cause model performance to decrease significantly.</p><p><b>Configuration:</b> By default, this test runs over the Mean-Absolute Error (MAE) metric with the below thresholds set for the absolute and degradation tests.</p><p><b>Example:</b> Assume that on the reference set the model obtained <span>0.85</span> AUC but on the evaluation set the model obtained <span>0.5</span> AUC. Then this test raises a warning.</p>

### Mean-Absolute Percentage Error (MAPE)
<p>This test checks the Mean-Absolute Percentage Error (MAPE) metric to see both if its performance on the evaluation set alone is satisfactory, as well as if performance in terms of Mean-Absolute Percentage Error (MAPE) has degraded from the reference to evaluation set. The key detail displays whether the given performance metric has degraded beyond a defined threshold.</p><p><b>Why it matters:</b> During production, factors like distribution shift or a change in <span>p(y|x)</span> may cause model performance to decrease significantly.</p><p><b>Configuration:</b> By default, this test runs over the Mean-Absolute Percentage Error (MAPE) metric with the below thresholds set for the absolute and degradation tests.</p><p><b>Example:</b> Assume that on the reference set the model obtained <span>0.85</span> AUC but on the evaluation set the model obtained <span>0.5</span> AUC. Then this test raises a warning.</p>

### Average Prediction
<p>This test checks the Average Prediction metric to see both if its performance on the evaluation set alone is satisfactory, as well as if performance in terms of Average Prediction has degraded from the reference to evaluation set. The key detail displays whether the given performance metric has degraded beyond a defined threshold.</p><p><b>Why it matters:</b> During production, factors like distribution shift or a change in <span>p(y|x)</span> may cause model performance to decrease significantly.</p><p><b>Configuration:</b> By default, this test runs over the Average Prediction metric with the below thresholds set for the absolute and degradation tests.</p><p><b>Example:</b> Assume that on the reference set the model obtained <span>0.85</span> AUC but on the evaluation set the model obtained <span>0.5</span> AUC. Then this test raises a warning.</p>

### Recall
<p>This test checks the Recall metric to see both if its performance on the evaluation set alone is satisfactory, as well as if performance in terms of Recall has degraded from the reference to evaluation set. The key detail displays whether the given performance metric has degraded beyond a defined threshold.</p><p><b>Why it matters:</b> During production, factors like distribution shift or a change in <span>p(y|x)</span> may cause model performance to decrease significantly.</p><p><b>Configuration:</b> By default, this test runs over the Recall metric with the below thresholds set for the absolute and degradation tests.</p><p><b>Example:</b> Assume that on the reference set the model obtained <span>0.85</span> AUC but on the evaluation set the model obtained <span>0.5</span> AUC. Then this test raises a warning.</p>

### Average Number of Predicted Boxes
<p>This test checks the Average Number of Predicted Boxes metric to see both if its performance on the evaluation set alone is satisfactory, as well as if performance in terms of Average Number of Predicted Boxes has degraded from the reference to evaluation set. The key detail displays whether the given performance metric has degraded beyond a defined threshold.</p><p><b>Why it matters:</b> During production, factors like distribution shift or a change in <span>p(y|x)</span> may cause model performance to decrease significantly.</p><p><b>Configuration:</b> By default, this test runs over the Average Number of Predicted Boxes metric with the below thresholds set for the absolute and degradation tests.</p><p><b>Example:</b> Assume that on the reference set the model obtained <span>0.85</span> AUC but on the evaluation set the model obtained <span>0.5</span> AUC. Then this test raises a warning.</p>

### Prediction Variance (Positive Labels)
<p>This test checks the Prediction Variance (Positive Labels) metric to see both if its performance on the evaluation set alone is satisfactory, as well as if performance in terms of Prediction Variance (Positive Labels) has degraded from the reference to evaluation set. The key detail displays whether the given performance metric has degraded beyond a defined threshold.</p><p><b>Why it matters:</b> During production, factors like distribution shift or a change in <span>p(y|x)</span> may cause model performance to decrease significantly.</p><p><b>Configuration:</b> By default, this test runs over the Prediction Variance (Positive Labels) metric with the below thresholds set for the absolute and degradation tests.</p><p><b>Example:</b> Assume that on the reference set the model obtained <span>0.85</span> AUC but on the evaluation set the model obtained <span>0.5</span> AUC. Then this test raises a warning.</p>

### False Negative Rate
<p>This test checks the False Negative Rate metric to see both if its performance on the evaluation set alone is satisfactory, as well as if performance in terms of False Negative Rate has degraded from the reference to evaluation set. The key detail displays whether the given performance metric has degraded beyond a defined threshold.</p><p><b>Why it matters:</b> During production, factors like distribution shift or a change in <span>p(y|x)</span> may cause model performance to decrease significantly.</p><p><b>Configuration:</b> By default, this test runs over the False Negative Rate metric with the below thresholds set for the absolute and degradation tests.</p><p><b>Example:</b> Assume that on the reference set the model obtained <span>0.85</span> AUC but on the evaluation set the model obtained <span>0.5</span> AUC. Then this test raises a warning.</p>

## Bias and Fairness

### Protected Feature Drift
<p>This test measures the change in the distribution of a feature by comparing the distribution in an evaluation set to a reference set. The test severity is a function of both the degree to which the distribution has changed and the estimated impact the observed drift has had on model performance.</p><p><b>Why it matters:</b> Distribution shift between training and inference can cause degradation in model performance. If the shift is sufficiently large, retraining the model on newer data may be necessary.</p><p><b>Configuration:</b> By default, this test runs over all feature columns with sufficiently many samples in both the reference and evaluation sets.</p><p><b>Example:</b> Suppose that the distribution of a feature <span>Age</span> shifts between the reference and evaluation sets such that the PSI between these two samples is <span>0.2</span>. If PSI is configured as the drift statistic for numeric features and the PSI warning threshold is set to <span>0.1</span>, this test would raise a warning.</p>

### Demographic Parity (Pos Pred)
<p>This test checks whether the Demographic Parity for any subset of a feature performs as well as the best Demographic Parity across all subsets of that feature. The Demographic Parity is calculated as the Positive Prediction Rate. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the Demographic Parity of model predictions within a specific subset is significantly lower than that of other subsets by taking a ratio of the rates. Also included in this test is the calculation of Disparate Impact Ratio for each subset, which is defined as the Positive Prediction Rate for the subset divided by the best Positive Prediction Rate across all subsets. </p><p><b>Why it matters:</b> Assessing differences in Demographic Parity is an important measures of fairness. It is meant to be used in a setting where we assert that the base Demographic Paritys between subgroups should be the same (even if empirically they are different). This contrasts with equality of opportunity or predictive parity tests, which permit classification rates to depend on a sensitive attribute. Comparing Positive Prediction Rates and Impact Ratios over all subsets can be useful in legal/compliance settings where we want the Demographic Parity for any sensitive group to fundamentally be the same as other groups. </p><p><b>Configuration:</b> By default, the Demographic Parity is computed for all protected features. The severity threshold baseline is set to 80% by default, in accordance with the four-fifths law for adverse impact detection. </p><p><b>Example:</b> Suppose we had data with the following protected feature 'animal': <span>['cat', 'cat', 'cat', 'dog', 'dog', 'dog']</span>, and model predictions <span>[0.3, 0.3, 0.9, 0.9, 0.9, 0.3]</span>. Then regardless of the labels, the Positive Prediction Rate over the feature values ('cat', 'dog') would be (0.33, 0.66), indicating a failure because cats would be selected half as often as dogs.</p>

### Demographic Parity (Avg Pred)
<p>This test checks whether the Average Prediction for any subset of a feature performs as well as the best Average Prediction across all subsets of that feature.  The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the Average Prediction of model predictions within a specific subset is significantly lower than that of other subsets by taking a ratio of the rates. Also included in this test is the calculation of Disparate Impact Ratio for each subset, which is defined as the Positive Prediction Rate for the subset divided by the best Positive Prediction Rate across all subsets. </p><p><b>Why it matters:</b> Assessing differences in Average Prediction is an important measures of fairness. It is meant to be used in a setting where we assert that the base Average Predictions between subgroups should be the same (even if empirically they are different). This contrasts with equality of opportunity or predictive parity tests, which permit classification rates to depend on a sensitive attribute. Comparing Positive Prediction Rates and Impact Ratios over all subsets can be useful in legal/compliance settings where we want the Average Prediction for any sensitive group to fundamentally be the same as other groups. </p><p><b>Configuration:</b> By default, the Average Prediction is computed for all protected features. The severity threshold baseline is set to 80% by default, in accordance with the four-fifths law for adverse impact detection. </p><p><b>Example:</b> Suppose we had data with the following protected feature 'animal': <span>['cat', 'cat', 'cat', 'dog', 'dog', 'dog']</span>, and model predictions <span>[10.4, 10.0, 10.2, 7.7, 8.0, 8.0]</span>. Then regardless of the labels, the Positive Prediction Rate over the feature values ('cat', 'dog') would be (10.2, 7.9), indicating a failure because dogs have an Average Prediction less than 80% of the Average Prediction for cats.</p>

### Demographic Parity (Avg Rank)
<p>This test checks whether the Average Rank for any subset of a feature performs as well as the best Average Rank across all subsets of that feature.  The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the Average Rank of model predictions within a specific subset is significantly lower than that of other subsets by taking a ratio of the rates. Also included in this test is the calculation of Disparate Impact Ratio for each subset, which is defined as the Positive Prediction Rate for the subset divided by the best Positive Prediction Rate across all subsets. </p><p><b>Why it matters:</b> Assessing differences in Average Rank is an important measures of fairness. It is meant to be used in a setting where we assert that the base Average Ranks between subgroups should be the same (even if empirically they are different). This contrasts with equality of opportunity or predictive parity tests, which permit classification rates to depend on a sensitive attribute. Comparing Positive Prediction Rates and Impact Ratios over all subsets can be useful in legal/compliance settings where we want the Average Rank for any sensitive group to fundamentally be the same as other groups. </p><p><b>Configuration:</b> By default, the Average Rank is computed for all protected features. The severity threshold baseline is set to 80% by default, in accordance with the four-fifths law for adverse impact detection. </p><p><b>Example:</b> Suppose we had data with the following protected feature 'animal': <span>['cat', 'cat', 'cat', 'dog', 'dog', 'dog']</span>, and model predictions <span>[0.3, 0.4, 0.5, 0.7, 0.8, 0.9]</span>, and rank <span>[6, 5, 4, 3, 2, 1]</span>. Then regardless of the labels, the Average Rank over the feature values ('cat', 'dog') would be (5, 2), indicating a failure in Average Rank.</p>

### Class Imbalance
<p>This test checks whether the training sample size for any subset of a feature is significantly smaller than other subsets of that feature. The test first splits the dataset into various subset classes within the feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the class imbalance measure of that subset compared to the largest subset exceeds a set threshold.</p><p><b>Why it matters:</b> Assessing class imbalance is an important measure of fairness. Features with low subset sizes can result in the model overfitting those subsets, and hence cause a larger error when those subsets appear in test data. This test can be useful in legal/compliance settings where sufficient data for all subsets of a protected feature is important.</p><p><b>Configuration:</b> By default, class imbalance is tested for all protected features. </p><p><b>Example:</b> Suppose we had data with the protected feature 'animal', where the distribution of the feature over subsets was 80% dog, 19% cat, and 1% rabbit. The class imbalance ratio hence would be 0.616 for cat and 0.975 for rabbit. The CI ratio for rabbit is close to the extreme of 1, implying that a model trained on this data might perform worse when making predictions on rabbits than over the other subsets.</p>

### Equalized Odds
<p>This test checks for equal true positive and false positive rates over all subsets for each protected feature. The test first splits the dataset into various subset classes within the feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the true positive and false positive rates of that subset significantly varies as compared to the largest subset.</p><p><b>Why it matters:</b> Equalized odds (or disparate mistreatment) is an important measure of fairness in machine learning. Subjects in protected groups may have different true positive rates or false positive rates, which imply that the model may be biased on those protected features. Fulfilling the condition of equalized odds may be a requirement in various legal/compliance settings.</p><p><b>Configuration:</b> By default, equalized odds is tested for all protected features. </p><p><b>Example:</b> Suppose we had data with the protected feature 'animal', where the true positive rates over the subsets 'dog', 'cat', and 'rabbit' were [0.6, 0.9, 0.1], and the false positive rates over the same subsets were [0.3, 0.33, 0.31]. Equalized odds tests for consistency over all true positive prediction rates and false positive prediction rates, hence this would result in a test failure because there is high discrepancy in the true positive rates over the subsets. </p>

### Feature Independence
<p>This test checks the independence of each protected feature with the predicted label class. It runs over categorical protected features and uses the chi square test of independence to determine the feature independence. The test compares the observed data to a model that distributes the data according to the expectation that the variables are independent. Wherever the observed data does not fit the model, the likelihood that the variables are dependent becomes stronger.</p><p><b>Why it matters:</b> A test of independence assesses whether observations consisting of measures on two variables, expressed in a contingency table, are independent of each other. This can be useful when assessing how protected features impact the predicted class and helping with the feature selection process.</p><p><b>Configuration:</b> By default, this test is run over all protected categorical features.</p><p><b>Example:</b> Let's say you have a model that predicts whether or not a person will be hired or not. One protected feature is gender. If these two variables are independent then the male-female ratio across hired and not hired should be the same. The p-value is 0.06 and the chi squared value is 300. The p-value is above the threshold of 0.05 to declare independence.</p>

### Predict Protected Features
<p>The Predict Protected Features test works by training a multi-class logistic regression model to infer categorical protected features from unprotected categorical and numerical features. The model is fit to the reference data and scored based on its accuracy over the evaluation data. The unprotected categorical features are one-hot encoded.</p><p><b>Why it matters:</b> In a compliance setting, it may be prohibited to include certain protected features in your training data. However, unprotected features might still provide your model with information about the protected features. If a simple logistic regression model can be trained to accurately predict protected features, your model might have a hidden reliance on protected features, resulting in biased decisions.</p><p><b>Configuration:</b> By default, the selection rate is computed for all protected features.</p><p><b>Example:</b> Suppose we had data with the following protected feature 'animal': <span>['cat', 'cat', 'cat', 'dog', 'dog', 'dog']</span>, and unprotected feature 'age': <span>[15, 10, 16, 2, 3, 7]</span>. Then if a logistic regression model is trained to predict 'animal' based on 'age', it might achieve a high accuracy, indicating that the unprotected feature 'age' could be used to easily predict the protected feature 'animal'</p>

### Equal Opportunity (Recall)
<p>The recall test is more popularly referred to as equal opportunity or false negative error rate balance in fairness literature. This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the Recall of model predictions within a specific subset is significantly lower than the model prediction Recall over the entire population. </p><p><b>Why it matters:</b> Having different true positive rates (e.g. equal opportunity) between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. Unlike demographic parity, this test permits assuming different base label rates but flags differing mistake rates between different subgroups. An intuitive example is when the label indicates a positive attribute: if predicting whether to interview a given candidate, make sure that out of qualified candidates, the rate at which the model predicts a rejection is similar to group A and B. </p><p><b>Configuration:</b> By default, Recall is computed over all predictions/labels. Note that we round predictions to 0/1 to compute recall.</p><p><b>Example:</b> Suppose we had data with 2 features: <span>[['cat', 0.2], ['dog', 0.3], ['cat', 0.5], ['dog', 0.7], ['cat', 0.7], ['dog', 0.2]]</span>, model predictions <span>[0.3, 0.51, 0.7, 0.49, 0.9, 0.58]</span>, and labels <span>[1, 0, 1, 0, 0, 1]</span>. Then, the Recall over the feature subset value 'cat' would be 0.5, compared to the overall metric of 0.66.</p>

### Equal Opportunity (Macro Recall)
<p>The recall test is more popularly referred to as equal opportunity or false negative error rate balance in fairness literature. When transitioning to the multiclass setting we can use macro recall which computes the recall of each individual class and then averages these numbers.This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the Macro Recall of model predictions within a specific subset is significantly lower than the model prediction Macro Recall over the entire population. </p><p><b>Why it matters:</b> Having different true positive rates (e.g. equal opportunity) between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. Unlike demographic parity, this test permits assuming different base label rates but flags differing mistake rates between different subgroups. An intuitive example is when the label indicates a positive attribute: if predicting whether to interview a given candidate, make sure that out of qualified candidates, the rate at which the model predicts an interview is similar to group A and B. </p><p><b>Configuration:</b> By default, Macro Recall is computed over all predictions/labels. Note that the predicted label is the label with the largest predicted class probability.</p><p><b>Example:</b> Suppose we are differentiating between cats, bears, and dogs. Assume that across the data points where <span>height=2</span> the predictions are <span>[0.9, 0.1, 0], [0.1, 0.9, 0], [0.2, 0.1, 0.7]</span> and the labels are <span>[1, 0, 0], [1, 0, 0], [0, 0, 1]</span> (where the first index corresponds to cat, the second corresponds to bear, and the third corresponds to dog). Then the Macro Recall across this subset is <span>0.67</span>. If the overall Macro Recall across all subsets is <span>0.9</span> then this test raises a warning.</p>

### Intersectional Group Fairness (Pos Pred)
<p>This test checks whether the model performs equally well across subgroups created from the intersection of protected groups. The test first creates unique pairs of categorical protected features. We then test whether the positive prediction rate of model predictions within a specific subset is significantly lower than the model positive prediction rate over the entire population. This will expose hidden biases against groups at the intersection of these protected features</p><p><b>Why it matters:</b> Most existing work in the fairness literature deals with a binary view of fairness - either a particular group is performing worse or not. This binary categorization misses the important nuance of the fairness field - that biases can often be amplified in subgroups that combine membership from different protected groups, especially if such a subgroup is particularly underrepresented in opportunities historically. The intersectional group fairness test is run over subsets representing this intersection between two protected groups.</p><p><b>Configuration:</b> This test runs over unique pairs of categorical protected features.</p><p><b>Example:</b> Suppose your dataset contains two protected features: race and gender. Both features pass the demographic parity test for categories women, men, white and black. However, when certain subsets of these features are combined, such as black women or white men, the positive prediction rates perform significantly worse than the overall population. This would show disparate impact towards this subgroup.</p>

### Intersectional Group Fairness (Avg Pred)
<p>This test checks whether the model performs equally well across subgroups created from the intersection of protected groups. The test first creates unique pairs of categorical protected features. We then test whether the average prediction of model predictions within a specific subset is significantly lower than the model average prediction over the entire population. This will expose hidden biases against groups at the intersection of these protected features</p><p><b>Why it matters:</b> Most existing work in the fairness literature deals with a binary view of fairness - either a particular group is performing worse or not. This binary categorization misses the important nuance of the fairness field - that biases can often be amplified in subgroups that combine membership from different protected groups, especially if such a subgroup is particularly underrepresented in opportunities historically. The intersectional group fairness test is run over subsets representing this intersection between two protected groups.</p><p><b>Configuration:</b> This test runs over unique pairs of categorical protected features.</p><p><b>Example:</b> Suppose your dataset contains two protected features: race and gender. Both features pass the demographic parity test for categories women, men, white and black. However, when certain subsets of these features are combined, such as black women or white men, the positive prediction rates perform significantly worse than the overall population. This would show disparate impact towards this subgroup.</p>

### Intersectional Group Fairness (Avg Rank)
<p>This test checks whether the model performs equally well across subgroups created from the intersection of protected groups. The test first creates unique pairs of categorical protected features. We then test whether the average rank of model predictions within a specific subset is significantly lower than the model average rank over the entire population. This will expose hidden biases against groups at the intersection of these protected features</p><p><b>Why it matters:</b> Most existing work in the fairness literature deals with a binary view of fairness - either a particular group is performing worse or not. This binary categorization misses the important nuance of the fairness field - that biases can often be amplified in subgroups that combine membership from different protected groups, especially if such a subgroup is particularly underrepresented in opportunities historically. The intersectional group fairness test is run over subsets representing this intersection between two protected groups.</p><p><b>Configuration:</b> This test runs over unique pairs of categorical protected features.</p><p><b>Example:</b> Suppose your dataset contains two protected features: race and gender. Both features pass the demographic parity test for categories women, men, white and black. However, when certain subsets of these features are combined, such as black women or white men, the positive prediction rates perform significantly worse than the overall population. This would show disparate impact towards this subgroup.</p>

### Predictive Equality (FPR)
<p>The false positive error rate test is also popularly referred to as as predictive equality, or equal mis-opportunity in fairness literature. This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the false positive rate of model predictions within a specific subset is significantly higher than the model prediction false positive rate over the entire population. </p><p><b>Why it matters:</b> Having different false positive rates (e.g. predictive equality) between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. Unlike demographic parity, this test permits assuming different base label rates but flags differing mistake rates between different subgroups. As an intuitive example, consider the case when the label indicates an undesirable attribute: if predicting whether a person will default on their loan, make sure that for people who didn't default, the rate at which the model incorrectly predicts positive is similar for group A and B. </p><p><b>Configuration:</b> By default, false positive rate is computed over all predictions/labels. Note that we round predictions to 0/1 to compute false positive rate.</p><p><b>Example:</b> Suppose we had data with 2 features: <span>[['cat', 0.2], ['dog', 0.3], ['cat', 0.5], ['dog', 0.7], ['cat', 0.7], ['dog', 0.2]]</span>, model predictions <span>[0.3, 0.51, 0.7, 0.49, 0.9, 0.58]</span>, and labels <span>[1, 0, 1, 0, 0, 1]</span>. Then, the false positive rate over the feature subset value 'cat' would be 1.0, compared to the overall metric of 0.67.</p>

### Discrimination By Proxy
<p>This test checks whether any feature is a proxy for a protected feature. It runs over categorical features, using mutual information as a measure of similarity with a protected feature. Mutual information measures any dependencies between two variables.</p><p><b>Why it matters:</b> A common strategy to try to ensure a model is not biased is to remove protected features from the training data entirely so the model cannot learn over them. However, if other features are highly dependent on those features, that could lead to the model effectively still training over those features by proxy.</p><p><b>Configuration:</b> By default, this test is run over all categorical protected columns.</p><p><b>Example:</b> Suppose we had data with a protected feature ('gender'). If there was another feature, like 'title', which was highly associated with 'gender', this test would raise a warning if the mutual information between those two features was particularly high.</p>

### Subset Sensitivity (Pos Pred)
<p>This test measures how sensitive the model is to substituting the lowest performing subset of a feature into a sample of data. The test splits the dataset into various subsets based on the feature values and finds the lowest performing subset, based on the lowest Positive Prediction Rate. The test then substitutes this subset into a sample from the original data and calculates the change in Positive Prediction Rate. This test fails if a model demonstrates significantly lower Positive Prediction Rate on the lowest performing subset.</p><p><b>Why it matters:</b> Assessing differences in model output is an important measure of fairness. If the model performs worse because of the value of a protected feature such as race or gender, then this could indicate bias. It can be useful in legal/compliance settings where we fundamentally want the prediction for any protected group to be the same as for other groups. </p><p><b>Configuration:</b> By default, the subset sensitivity is computed for all protected features that are strings.</p><p><b>Example:</b> Suppose the data had the following protected feature 'animal': <span>['cat', 'cat', 'cat', 'dog', 'dog', 'dog', 'horse', 'horse']</span>, and model predictions for cat were the lowest. If substituting cat for dog and horse in the other inputs causes model predictions to decrease, then this would indicate a failure because the model disadvantages cats.</p>

### Subset Sensitivity (Avg Pred)
<p>This test measures how sensitive the model is to substituting the lowest performing subset of a feature into a sample of data. The test splits the dataset into various subsets based on the feature values and finds the lowest performing subset, based on the lowest Average Prediction. The test then substitutes this subset into a sample from the original data and calculates the change in Average Prediction. This test fails if a model demonstrates significantly lower Average Prediction on the lowest performing subset.</p><p><b>Why it matters:</b> Assessing differences in model output is an important measure of fairness. If the model performs worse because of the value of a protected feature such as race or gender, then this could indicate bias. It can be useful in legal/compliance settings where we fundamentally want the prediction for any protected group to be the same as for other groups. </p><p><b>Configuration:</b> By default, the subset sensitivity is computed for all protected features that are strings.</p><p><b>Example:</b> Suppose the data had the following protected feature 'animal': <span>['cat', 'cat', 'cat', 'dog', 'dog', 'dog', 'horse', 'horse']</span>, and model predictions for cat were the lowest. If substituting cat for dog and horse in the other inputs causes model predictions to decrease, then this would indicate a failure because the model disadvantages cats.</p>

### Subset Sensitivity (Avg Rank)
<p>This test measures how sensitive the model is to substituting the lowest performing subset of a feature into a sample of data. The test splits the dataset into various subsets based on the feature values and finds the lowest performing subset, based on the lowest Average Rank. The test then substitutes this subset into a sample from the original data and calculates the change in Average Rank. This test fails if a model demonstrates significantly lower Average Rank on the lowest performing subset.</p><p><b>Why it matters:</b> Assessing differences in model output is an important measure of fairness. If the model performs worse because of the value of a protected feature such as race or gender, then this could indicate bias. It can be useful in legal/compliance settings where we fundamentally want the prediction for any protected group to be the same as for other groups. </p><p><b>Configuration:</b> By default, the subset sensitivity is computed for all protected features that are strings.</p><p><b>Example:</b> Suppose the data had the following protected feature 'animal': <span>['cat', 'cat', 'cat', 'dog', 'dog', 'dog', 'horse', 'horse']</span>, and model predictions for cat were the lowest. If substituting cat for dog and horse in the other inputs causes model predictions to decrease, then this would indicate a failure because the model disadvantages cats.</p>

### Gendered Pronoun Distribution
<p>This test checks that both masculine and feminine pronouns are approximately equally likely to be predicted by the fill-mask model for various templates.</p><p><b>Why it matters:</b> Fill-mask models can be tested for gender bias by analyzing predictions for a masked portion of a semantically-bleached template. If a model is significantly more likely to suggest a masculine or feminine pronoun within a sentence relative to its counterpart, it may be learning biased behaviors, which can have important ethical implications.</p><p><b>Configuration:</b> This test runs only on fill-mask model tasks.</p><p><b>Example:</b> Suppose we had the masked template <span>[MASK] runs this company.</span>. We can configure this test to check that both <span>she</span> or <span>he</span> have similar probabilities of being chosen by the model. </p>

### Fill Mask Invariance
<p>This test uses templates to check that word associations of fill-mask models are similar for majority and protected minority groups.</p><p><b>Why it matters:</b> Fill-mask models are vulnerable to significant bias based on the target groups provided in a semantically-bleached template. If a model is significantly more likely to suggest certain attributes within a sentence for one protected group relative to a counterpart, it may be learning biased behaviors, which can have important ethical implications.</p><p><b>Configuration:</b> This test runs only on fill-mask model tasks.</p><p><b>Example:</b> Suppose we had this pair of masked templates: <span>She is very [MASK]</span> and <span>He is very [MASK]</span>.We can configure this test to check that the model suggests similar attributes for both templates. A biased model may return very different responses, like <span>beautiful</span> for the first template and <span>intelligent</span> for the second template, which could be a sign the model is learning biased or stereotypical behaviors.</p>

### Replace Masculine with Feminine Pronouns
<p>This test measures the robustness of your model to Replace Masculine with Feminine Pronouns transformations. It does this by taking a sample input, swapping all masculine pronouns from the input string to feminine ones, and measuring the behavior of the model on the transformed input.</p><p><b>Why it matters:</b> Production natural language input sequences can have errors from data preprocessing or human input (mistaken or adversarial). It is important that your NLP models are robust to the introduction of such errors.</p><p><b>Configuration:</b> By default, this test runs over a sample of strings from the evaluation set, and it performs this attack on 5% of the words in each input.</p><p><b>Example:</b> Given an input sequence "He was elected because his opponent dropped out", this test measures the performance of the model when given the transformed input of "She was elected because her opponent dropped out".</p>

### Replace Feminine with Masculine Pronouns
<p>This test measures the robustness of your model to Replace Feminine with Masculine Pronouns transformations. It does this by taking a sample input, swapping all feminine pronouns from the input string to masculine ones, and measuring the behavior of the model on the transformed input.</p><p><b>Why it matters:</b> Production natural language input sequences can have errors from data preprocessing or human input (mistaken or adversarial). It is important that your NLP models are robust to the introduction of such errors.</p><p><b>Configuration:</b> By default, this test runs over a sample of strings from the evaluation set, and it performs this attack on 5% of the words in each input.</p><p><b>Example:</b> Given an input sequence "She was elected because her opponent dropped out", this test measures the performance of the model when given the transformed input of "He was elected because his opponent dropped out".</p>

### Replace Masculine with Feminine Names
<p>This test measures the invariance of your model to swapping gendered names transformations. It does this by taking a sample input, swapping all instances of traditionally masculine names (in the provided list) with a traditionally feminine name, and measuring the behavior of the model on the transformed input.</p><p><b>Why it matters:</b> Production natural language input sequences should properly support people of all demographics. It is important that your NLP models are robust to spurious correlations and bias from the data.</p><p><b>Configuration:</b> By default, this test runs over a sample of text instances from the evaluation set that containone or more words from the source list.</p><p><b>Example:</b> Given an input sequence "Amy is a good student.", this test measures the behavior of the model when given the transformed input of "Adrian is a good student.".</p>

### Replace Feminine with Masculine Names
<p>This test measures the invariance of your model to swapping gendered names transformations. It does this by taking a sample input, swapping all instances of traditionally feminine names (in the provided list) with a traditionally masculine name, and measuring the behavior of the model on the transformed input.</p><p><b>Why it matters:</b> Production natural language input sequences should properly support people of all demographics. It is important that your NLP models are robust to spurious correlations and bias from the data.</p><p><b>Configuration:</b> By default, this test runs over a sample of text instances from the evaluation set that containone or more words from the source list.</p><p><b>Example:</b> Given an input sequence "Adrian is a good student.", this test measures the behavior of the model when given the transformed input of "Amy is a good student.".</p>

### Replace Masculine with Plural Pronouns
<p>This test measures the robustness of your model to Replace Masculine with Plural Pronouns transformations. It does this by taking a sample input, swapping all masculine pronouns from the input string to plural ones, and measuring the behavior of the model on the transformed input.</p><p><b>Why it matters:</b> Production natural language input sequences can have errors from data preprocessing or human input (mistaken or adversarial). It is important that your NLP models are robust to the introduction of such errors.</p><p><b>Configuration:</b> By default, this test runs over a sample of strings from the evaluation set, and it performs this attack on 5% of the words in each input.</p><p><b>Example:</b> Given an input sequence "He got elected because his opponent dropped out", this test measures the performance of the model when given the transformed input of "They got elected because their opponent dropped out".</p>

### Replace Feminine with Plural Pronouns
<p>This test measures the robustness of your model to Replace Feminine with Plural Pronouns transformations. It does this by taking a sample input, swapping all feminine pronouns from the input string to masculine ones, and measuring the behavior of the model on the transformed input.</p><p><b>Why it matters:</b> Production natural language input sequences can have errors from data preprocessing or human input (mistaken or adversarial). It is important that your NLP models are robust to the introduction of such errors.</p><p><b>Configuration:</b> By default, this test runs over a sample of strings from the evaluation set, and it performs this attack on 5% of the words in each input.</p><p><b>Example:</b> Given an input sequence "She got elected because her opponent dropped out", this test measures the performance of the model when given the transformed input of "They got elected because their opponent dropped out".</p>

### Swap High Income with Low Income Countries
<p>This test measures the invariance of your model to country name swap transformations. It does this by taking a sample input, swapping all instances of traditionally high-income countries (in the provided list) with a traditionally low-income country, and measuring the behavior of the model on the transformed input.</p><p><b>Why it matters:</b> Production natural language input sequences should properly support people of all demographics. It is important that your NLP models are robust to spurious correlations and bias from the data.</p><p><b>Configuration:</b> By default, this test runs over a sample of text instances from the evaluation set that containone or more words from the source list.</p><p><b>Example:</b> Given an input sequence "I grew up in Yemen.", this test measures the behavior of the model when given the transformed input of "I grew up in Germany.".</p>

### Swap Low Income with High Income Countries
<p>This test measures the invariance of your model to country name swap transformations. It does this by taking a sample input, swapping all instances of traditionally low-income countries (in the provided list) with a traditionally high-income country, and measuring the behavior of the model on the transformed input.</p><p><b>Why it matters:</b> Production natural language input sequences should properly support people of all demographics. It is important that your NLP models are robust to spurious correlations and bias from the data.</p><p><b>Configuration:</b> By default, this test runs over a sample of text instances from the evaluation set that containone or more words from the source list.</p><p><b>Example:</b> Given an input sequence "I grew up in Germany.", this test measures the behavior of the model when given the transformed input of "I grew up in Yemen.".</p>

### Swap Majority Ethnicity Names with Minority Names
<p>This test measures the invariance of your model to swapping names of various ethnicities transformations. It does this by taking a sample input, swapping all instances of traditionally majority names (in the provided list) with a traditionally minority name, and measuring the behavior of the model on the transformed input.</p><p><b>Why it matters:</b> Production natural language input sequences should properly support people of all demographics. It is important that your NLP models are robust to spurious correlations and bias from the data.</p><p><b>Configuration:</b> By default, this test runs over a sample of text instances from the evaluation set that containone or more words from the source list.</p><p><b>Example:</b> Given an input sequence "Alberto is a good student.", this test measures the behavior of the model when given the transformed input of "Adrian is a good student.".</p>

### Swap Minority Ethnicity Names with Majority Names
<p>This test measures the invariance of your model to swapping names of various ethnicities transformations. It does this by taking a sample input, swapping all instances of traditionally minority names (in the provided list) with a traditionally majority name, and measuring the behavior of the model on the transformed input.</p><p><b>Why it matters:</b> Production natural language input sequences should properly support people of all demographics. It is important that your NLP models are robust to spurious correlations and bias from the data.</p><p><b>Configuration:</b> By default, this test runs over a sample of text instances from the evaluation set that containone or more words from the source list.</p><p><b>Example:</b> Given an input sequence "Adrian is a good student.", this test measures the behavior of the model when given the transformed input of "Alberto is a good student.".</p>

## Transformations

### Out of Range Substitution
<p>This test measures the impact on the model when we substitute values outside the inferred range of allowed values into clean datapoints. </p><p><b>Why it matters:</b> In production, the model may encounter corrupted or manipulated out of range values. It is important that the model is robust to such extremities.</p><p><b>Configuration:</b> By default, this test runs over all numeric features.</p><p><b>Example:</b> In the reference set, the <span>Age</span> feature has a range of <span>[0, 121]</span>. This test raises a warning if substituting values outside of this range into <span>Age</span> (eg. <span>150, 200</span>) causes model performance to decrease.</p>

### Numeric Outliers Substitution
<p>This test measures the impact on the model when we substitute outliers into clean datapoints. Outliers are values which may not necessarily be outside of an allowed range for a feature, but are extreme values that are unusual and may be indicative of abnormality. </p><p><b>Why it matters:</b> Outliers can be a sign of corrupted or otherwise erroneous data, and can degrade model performance if used in the training data, or lead to unexpected behaviour if input at inference time.</p><p><b>Configuration:</b> By default this test is run over each numeric feature that is neither unique nor ascending.</p><p><b>Example:</b> Suppose there is a feature <span>age</span> for which in the reference set the values <span>103</span> and <span>114</span> each appear once but every other value (with substantial sample size) is contained within the range <span>[0, 97]</span>. Then we would infer a lower outlier threshold of <span>0</span> and an upper outlier threshold of <span>97</span>. This test raises a warning if substituting outliers into <span>age</span> causes model performance to decrease.</p>

### Feature Type Change
<p>This test measures the impact on the model when we substitute valid feature values with values of the incorrect type.</p><p><b>Why it matters:</b> A feature may require a specific type. However, errors in the data pipeline may produce values that are outside the expected type. Failing to catch such errors may lead to errors or undefined behavior from the model.</p><p><b>Configuration:</b> By default, this test runs over all features.</p><p><b>Example:</b> Say that the feature <span>Cost</span> requires the float type. This test raises a warning if changing values in <span>Cost</span> to a different type causes model performance to decrease.</p>

### Empty String Substitution
<p>This test measures the impact on the model when we substitute empty string values instead of null values into clean datapoints. </p><p><b>Why it matters:</b> In production, the model may encounter corrupted or manipulated string values. Null values and empty strings are often expected to be treated the same, but the model might not treat them that way. It is important that the model is robust to such extremities.</p><p><b>Configuration:</b> By default, this test runs over all string features with null values.</p><p><b>Example:</b> In the reference set, the <span>Name</span> feature contains nulls. This test raises a warning if substituting empty strings instead of null values into the <span>Name</span> feature causes model performance to decrease.</p>

### Required Characters Deletion
<p>This test measures the impact on the model when we delete required characters, inferred from the reference set, from the strings of clean datapoints.</p><p><b>Why it matters:</b> A feature may require specific characters. However, errors in the data pipeline may allow invalid data points that lack these required characters to pass. Failing to catch such errors may lead to noisier training data or noisier predictions during inference, which can degrade model metrics.</p><p><b>Configuration:</b> By default, this test runs over all string features that are inferred to have required characters.</p><p><b>Example:</b> Say that the feature <span>email</span> requires the character <span>@</span>. This test raises a warning if removing <span>@</span> from values in <span>email</span> causes model performance to decrease</p>

### Unseen Categorical Substitution
<p>This test measures the impact on the model when we substitute unseen categorical values into clean datapoints. </p><p><b>Why it matters:</b> Unseen categorical values are a common failure point in machine learning systems; since these models are trained over a reference set, they may yield uninterpretable or undefined behavior when interacting with an unseen categorical value. In addition, such errors may expose gaps or errors in data collection.</p><p><b>Configuration:</b> By default, this test runs over all categorical features.</p><p><b>Example:</b> Say that the feature <span>Animal</span> contains the values <span>['Cat', 'Dog']</span> from the reference set. This test raises a warning if substituting unseen values into the feature <span>Animal</span> causes model performance to decrease.</p>

### Null Substitution
<p>This test measures the impact on the model when we substitute nulls in features that should not have nulls into clean datapoints. </p><p><b>Why it matters:</b> The model may make certain assumptions about a column depending on whether or not it had nulls in the training data. If these assumptions break during production, this may damage the model's performance. For example, if a column was never null during training then a model may not have learned to be robust against noise in that column. </p><p><b>Configuration:</b> By default, this test runs over all columns that had zero nulls in the reference set. </p><p><b>Example:</b> Suppose that the feature <span>Age</span> was never null in the reference set. This test raises a warning if substituting nulls into the <span>Age</span> feature causes model performance to decrease. </p>

### Capitalization Change
<p>This test measures the impact on the model when we substitute different types of capitalization into clean datapoints. </p><p><b>Why it matters:</b> In production, models can come across the same value with different capitalizations, making it important to explicitly check that your model is invariant to such differences.</p><p><b>Configuration:</b> By default, this test runs over all categorical features.</p><p><b>Example:</b> Suppose we had a column that corresponded to country code. For a specific row, let's say the observed value in the reference set was <span>USA</span>. This test raises a warning if substituting different capitalizations of <span>USA</span>, eg.<span>usa</span>, causes model performance to decrease.</p>

### Upper-Case Text
<p>This test measures the robustness of your model to Upper-Case Text transformations. It does this by taking a sample input, upper-casing all text, and measuring the behavior of the model on the transformed input.</p><p><b>Why it matters:</b> Production natural language input sequences can have errors from data preprocessing or human input (mistaken or adversarial). It is important that your NLP models are robust to the introduction of such errors.</p><p><b>Configuration:</b> By default, this test runs over a sample of strings from the evaluation set, and it performs this attack on 5% of the words in each input.</p><p><b>Example:</b> Given an input sequence "The boy saw Paris Hilton in Paris", this test measures the performance of the model when given the transformed input of "THE BOY SAW PARIS HILTON IN PARIS".</p>

### Lower-Case Text
<p>This test measures the robustness of your model to Lower-Case Text transformations. It does this by taking a sample input, lower-casing all text, and measuring the behavior of the model on the transformed input.</p><p><b>Why it matters:</b> Production natural language input sequences can have errors from data preprocessing or human input (mistaken or adversarial). It is important that your NLP models are robust to the introduction of such errors.</p><p><b>Configuration:</b> By default, this test runs over a sample of strings from the evaluation set, and it performs this attack on 5% of the words in each input.</p><p><b>Example:</b> Given an input sequence "The boy saw Paris Hilton in Paris", this test measures the performance of the model when given the transformed input of "the boy saw paris hilton in paris".</p>

### Remove Special Characters
<p>This test measures the robustness of your model to Remove Special Characters transformations. It does this by taking a sample input, removing all periods and apostrophes from the input string, and measuring the behavior of the model on the transformed input.</p><p><b>Why it matters:</b> Production natural language input sequences can have errors from data preprocessing or human input (mistaken or adversarial). It is important that your NLP models are robust to the introduction of such errors.</p><p><b>Configuration:</b> By default, this test runs over a sample of strings from the evaluation set, and it performs this attack on 5% of the words in each input.</p><p><b>Example:</b> Given an input sequence "The quick brown fox jumped over the lazy dog...", this test measures the performance of the model when given the transformed input of "The quick brown fox jumped over the lazy dog".</p>

### Unicode to ASCII
<p>This test measures the robustness of your model to Unicode to ASCII transformations. It does this by taking a sample input, converting all characters in the input string to their nearest ASCII representation, and measuring the behavior of the model on the transformed input.</p><p><b>Why it matters:</b> Production natural language input sequences can have errors from data preprocessing or human input (mistaken or adversarial). It is important that your NLP models are robust to the introduction of such errors.</p><p><b>Configuration:</b> By default, this test runs over a sample of strings from the evaluation set, and it performs this attack on 5% of the words in each input.</p><p><b>Example:</b> Given an input sequence "René François Lacôte did not like that movie", this test measures the performance of the model when given the transformed input of "Rene Francois Lacote did not like that movie".</p>

### Character Substitution
<p>This test measures the robustness of your model to character substitution attacks. It does this by randomly substituting characters in the input string and measuring your model's performance on the attacked string.</p><p><b>Why it matters:</b> Production natural language input sequences can have errors from data preprocessing or human input (mistaken or adversarial). It is important that your NLP models are robust to the introduction of such errors.</p><p><b>Configuration:</b> By default, this test runs over a sample of strings from the evaluation set, and it performs this attack on 5% of the words in each input.</p><p><b>Example:</b> Given an input sequence "The quick brown fox jumped over the lazy dog", this test measures the performance of the model when given the attacked input of "Tie quick brorn fox tumped over the lyzy dog".</p>

### Character Deletion
<p>This test measures the robustness of your model to character deletion attacks. It does this by randomly deleting characters in the input string and measuring your model's performance on the attacked string.</p><p><b>Why it matters:</b> Production natural language input sequences can have errors from data preprocessing or human input (mistaken or adversarial). It is important that your NLP models are robust to the introduction of such errors.</p><p><b>Configuration:</b> By default, this test runs over a sample of strings from the evaluation set, and it performs this attack on 5% of the words in each input.</p><p><b>Example:</b> Given an input sequence "The quick brown fox jumped over the lazy dog", this test measures the performance of the model when given the attacked input of "Th quick brwn fox jumpd over the lazy dog".</p>

### Character Insertion
<p>This test measures the robustness of your model to character insertion attacks. It does this by randomly adding characters to the input string and measuring your model's performance on the attacked string.</p><p><b>Why it matters:</b> Production natural language input sequences can have errors from data preprocessing or human input (mistaken or adversarial). It is important that your NLP models are robust to the introduction of such errors.</p><p><b>Configuration:</b> By default, this test runs over a sample of strings from the evaluation set, and it performs this attack on 5% of the words in each input.</p><p><b>Example:</b> Given an input sequence "The quick brown fox jumped over the lazy dog", this test measures the performance of the model when given the attacked input of "Thew quick broqwn fox jumqped over the lazy dog".</p>

### Character Swap
<p>This test measures the robustness of your model to character swap attacks. It does this by randomly swapping characters in the input string and measuring your model's performance on the attacked string.</p><p><b>Why it matters:</b> Production natural language input sequences can have errors from data preprocessing or human input (mistaken or adversarial). It is important that your NLP models are robust to the introduction of such errors.</p><p><b>Configuration:</b> By default, this test runs over a sample of strings from the evaluation set, and it performs this attack on 5% of the words in each input.</p><p><b>Example:</b> Given an input sequence "The quick brown fox jumped over the lazy dog", this test measures the performance of the model when given the attacked input of "Teh quick bornw fox ujmpde over the lazy dog".</p>

### Keyboard Augmentation
<p>This test measures the robustness of your model to keyboard augmentation attacks. It does this by adding common typos based on keyboard distance to the input string and measuring your model's performance on the attacked string.</p><p><b>Why it matters:</b> Production natural language input sequences can have errors from data preprocessing or human input (mistaken or adversarial). It is important that your NLP models are robust to the introduction of such errors.</p><p><b>Configuration:</b> By default, this test runs over a sample of strings from the evaluation set, and it performs this attack on 5% of the words in each input.</p><p><b>Example:</b> Given an input sequence "The quick brown fox jumped over the lazy dog", this test measures the performance of the model when given the attacked input of "Thr quick browb fox jumled over the lazy dog".</p>

### Common Misspellings
<p>This test measures the robustness of your model to common misspellings attacks. It does this by adding common misspellings to the input string and measuring your model's performance on the attacked string.</p><p><b>Why it matters:</b> Production natural language input sequences can have errors from data preprocessing or human input (mistaken or adversarial). It is important that your NLP models are robust to the introduction of such errors.</p><p><b>Configuration:</b> By default, this test runs over a sample of strings from the evaluation set, and it performs this attack on 5% of the words in each input.</p><p><b>Example:</b> Given an input sequence "The quick brown fox jumped over the lazy dog", this test measures the performance of the model when given the attacked input of "Thee quik brown focks jumped over the lasy dog".</p>

### OCR Error Simulation
<p>This test measures the robustness of your model to ocr error simulation attacks. It does this by adding common OCR errors to the input string and measuring your model's performance on the attacked string.</p><p><b>Why it matters:</b> Production natural language input sequences can have errors from data preprocessing or human input (mistaken or adversarial). It is important that your NLP models are robust to the introduction of such errors.</p><p><b>Configuration:</b> By default, this test runs over a sample of strings from the evaluation set, and it performs this attack on 5% of the words in each input.</p><p><b>Example:</b> Given an input sequence "The quick brown fox jumped over the lazy dog", this test measures the performance of the model when given the attacked input of "Th3 quick br0wn fox jumped over the 1azy d0g".</p>

### Synonym Swap
<p>This test measures the robustness of your model to synonym swap attacks. It does this by randomly swapping synonyms in the input string and measuring your model's performance on the attacked string.</p><p><b>Why it matters:</b> Production natural language input sequences can have errors from data preprocessing or human input (mistaken or adversarial). It is important that your NLP models are robust to the introduction of such errors.</p><p><b>Configuration:</b> By default, this test runs over a sample of strings from the evaluation set, and it performs this attack on 5% of the words in each input.</p><p><b>Example:</b> Given an input sequence "The quick brown fox jumped over the lazy dog", this test measures the performance of the model when given the attacked input of "The fast brown fox leaped over the lazy dog".</p>

### Contextual Word Swap
<p>This test measures the robustness of your model to contextual word swap attacks. It does this by replacing words with those close in embedding space and measuring your model's performance on the attacked string.</p><p><b>Why it matters:</b> Production natural language input sequences can have errors from data preprocessing or human input (mistaken or adversarial). It is important that your NLP models are robust to the introduction of such errors.</p><p><b>Configuration:</b> By default, this test runs over a sample of strings from the evaluation set, and it performs this attack on 5% of the words in each input.</p><p><b>Example:</b> Given an input sequence "The quick brown fox jumped over the lazy dog", this test measures the performance of the model when given the attacked input of "the fast brown pigeon leaped over the white dog".</p>

### Contextual Word Insertion
<p>This test measures the robustness of your model to contextual word insertion attacks. It does this by inserting words generated from a language model and measuring your model's performance on the attacked string.</p><p><b>Why it matters:</b> Production natural language input sequences can have errors from data preprocessing or human input (mistaken or adversarial). It is important that your NLP models are robust to the introduction of such errors.</p><p><b>Configuration:</b> By default, this test runs over a sample of strings from the evaluation set, and it performs this attack on 5% of the words in each input.</p><p><b>Example:</b> Given an input sequence "The quick brown fox jumped over the lazy dog", this test measures the performance of the model when given the attacked input of "the fast brown fox leaped away over the lazy dog".</p>

### Lower-Case Entity
<p>This test measures the robustness of your model to Lower-Case Entity transformations. It does this by taking a sample input, lower-casing all entities, and measuring the behavior of the model on the transformed input.</p><p><b>Why it matters:</b> Production natural language input sequences can have errors from data preprocessing or human input (mistaken or adversarial). It is important that your NLP models are robust to the introduction of such errors.</p><p><b>Configuration:</b> By default, this test runs over a sample of strings from the evaluation set, and it performs this attack on 30% of the words in each input.</p><p><b>Example:</b> Given an input sequence "The boy saw Paris Hilton in Paris", this test measures the performance of the model when given the transformed input of "The boy saw paris hilton in paris".</p>

### Upper-Case Entity
<p>This test measures the robustness of your model to Upper-Case Entity transformations. It does this by taking a sample input, upper-casing all entities, and measuring the behavior of the model on the transformed input.</p><p><b>Why it matters:</b> Production natural language input sequences can have errors from data preprocessing or human input (mistaken or adversarial). It is important that your NLP models are robust to the introduction of such errors.</p><p><b>Configuration:</b> By default, this test runs over a sample of strings from the evaluation set, and it performs this attack on 30% of the words in each input.</p><p><b>Example:</b> Given an input sequence "The boy saw Paris Hilton in Paris", this test measures the performance of the model when given the transformed input of "The boy saw PARIS HILTON in PARIS".</p>

### Ampersand
<p>This test measures the robustness of your model to Ampersand transformations. It does this by taking a sample input, changing <span>&</span> to <span>and</span>, and measuring the behavior of the model on the transformed input.</p><p><b>Why it matters:</b> Production natural language input sequences can have errors from data preprocessing or human input (mistaken or adversarial). It is important that your NLP models are robust to the introduction of such errors.</p><p><b>Configuration:</b> By default, this test runs over a sample of strings from the evaluation set, and it performs this attack on 30% of the words in each input.</p><p><b>Example:</b> Given an input sequence "Peanut Butter & Jelly", this test measures the performance of the model when given the transformed input of "Peanut Butter and Jelly".</p>

### Abbreviation Expander
<p>This test measures the robustness of your model to Abbreviation Expander transformations. It does this by taking a sample input, expanding abbreviations in entities, and measuring the behavior of the model on the transformed input.</p><p><b>Why it matters:</b> Production natural language input sequences can have errors from data preprocessing or human input (mistaken or adversarial). It is important that your NLP models are robust to the introduction of such errors.</p><p><b>Configuration:</b> By default, this test runs over a sample of strings from the evaluation set, and it performs this attack on 30% of the words in each input.</p><p><b>Example:</b> Given an input sequence "Monsters Inc.", this test measures the performance of the model when given the transformed input of "Monsters Incorporated".</p>

### Whitespace Around Special Character
<p>This test measures the robustness of your model to Whitespace Around Special Character transformations. It does this by taking a sample input, adding whitespace around special characters, and measuring the behavior of the model on the transformed input.</p><p><b>Why it matters:</b> Production natural language input sequences can have errors from data preprocessing or human input (mistaken or adversarial). It is important that your NLP models are robust to the introduction of such errors.</p><p><b>Configuration:</b> By default, this test runs over a sample of strings from the evaluation set, and it performs this attack on 30% of the words in each input.</p><p><b>Example:</b> Given an input sequence "Hi customer. That'll be $50.", this test measures the performance of the model when given the transformed input of "Hi customer . That ' ll be $ 50 .".</p>

### Entity Unicode to ASCII
<p>This test measures the robustness of your model to Entity Unicode to ASCII transformations. It does this by taking a sample input, converting all characters in the input string to their nearest ASCII representation, and measuring the behavior of the model on the transformed input.</p><p><b>Why it matters:</b> Production natural language input sequences can have errors from data preprocessing or human input (mistaken or adversarial). It is important that your NLP models are robust to the introduction of such errors.</p><p><b>Configuration:</b> By default, this test runs over a sample of strings from the evaluation set, and it performs this attack on 30% of the words in each input.</p><p><b>Example:</b> Given an input sequence "René François Lacôte did not like that movie", this test measures the performance of the model when given the transformed input of "Rene Francois Lacote did not like that movie".</p>

### Entity Remove Special Characters
<p>This test measures the robustness of your model to Entity Remove Special Characters transformations. It does this by taking a sample input, removing all periods and apostrophes from the input string, and measuring the behavior of the model on the transformed input.</p><p><b>Why it matters:</b> Production natural language input sequences can have errors from data preprocessing or human input (mistaken or adversarial). It is important that your NLP models are robust to the introduction of such errors.</p><p><b>Configuration:</b> By default, this test runs over a sample of strings from the evaluation set, and it performs this attack on 30% of the words in each input.</p><p><b>Example:</b> Given an input sequence "The quick brown fox jumped over the lazy dog...", this test measures the performance of the model when given the transformed input of "The quick brown fox jumped over the lazy dog".</p>

### Swap Unseen Entities
<p>This test measures the robustness of your model to Swap Unseen Entities transformations. It does this by taking a sample input, swapping all the entities in a text with random entities of the same category, unseen in the data, and measuring the behavior of the model on the transformed input. This test supports swapping entities from commonly-appearing categories in NER tasks: Person, Geopolitical Entity, Location, Nationality, Product, Corporation, and Organization.</p><p><b>Why it matters:</b> Production natural language input sequences can have errors from data preprocessing or human input (mistaken or adversarial). It is important that your NLP models are robust to the introduction of such errors.</p><p><b>Configuration:</b> By default, this test runs over a sample of strings from the evaluation set, and it performs this attack on 30% of the words in each input.</p><p><b>Example:</b> Given an input sequence "DNIB also set a 110 million guilder step-up bond.", this test measures the performance of the model when given the transformed input of "New Oromio Insurance LLC also set a 110 million guilder step-up bond.".</p>

### Gaussian Blur
<p>This test measures the robustness of your model to Gaussian Blur transformations. It does this by taking a sample input, blurring the image, and measuring the behavior of the model on the transformed input.</p><p><b>Why it matters:</b> Production inputs can have unusual variations amongst many different dimensions, ranging from lighting changes to sensor errors to compression artifacts. It is important that your models are robust to the introduction of such variations.</p>

### Color Jitter
<p>This test measures the robustness of your model to Color Jitter transformations. It does this by taking a sample input, jittering the image colors, and measuring the behavior of the model on the transformed input.</p><p><b>Why it matters:</b> Production inputs can have unusual variations amongst many different dimensions, ranging from lighting changes to sensor errors to compression artifacts. It is important that your models are robust to the introduction of such variations.</p>

### Gaussian Noise
<p>This test measures the robustness of your model to Gaussian Noise transformations. It does this by taking a sample input, adding gaussian noise to the image, and measuring the behavior of the model on the transformed input.</p><p><b>Why it matters:</b> Production inputs can have unusual variations amongst many different dimensions, ranging from lighting changes to sensor errors to compression artifacts. It is important that your models are robust to the introduction of such variations.</p>

### Vertical Flip
<p>This test measures the robustness of your model to Vertical Flip transformations. It does this by taking a sample input, flipping the image vertically, and measuring the behavior of the model on the transformed input.</p><p><b>Why it matters:</b> Production inputs can have unusual variations amongst many different dimensions, ranging from lighting changes to sensor errors to compression artifacts. It is important that your models are robust to the introduction of such variations.</p>

### Horizontal Flip
<p>This test measures the robustness of your model to Horizontal Flip transformations. It does this by taking a sample input, flipping the image horizontally, and measuring the behavior of the model on the transformed input.</p><p><b>Why it matters:</b> Production inputs can have unusual variations amongst many different dimensions, ranging from lighting changes to sensor errors to compression artifacts. It is important that your models are robust to the introduction of such variations.</p>

### Randomize Pixels With Mask
<p>This test measures the robustness of your model to Randomize Pixels With Mask transformations. It does this by taking a sample input, randomizing pixels with fixed probability, and measuring the behavior of the model on the transformed input.</p><p><b>Why it matters:</b> Production inputs can have unusual variations amongst many different dimensions, ranging from lighting changes to sensor errors to compression artifacts. It is important that your models are robust to the introduction of such variations.</p>

### Contrast Increase
<p>This test measures the robustness of your model to Contrast Increase transformations. It does this by taking a sample input, increase image contrast, and measuring the behavior of the model on the transformed input.</p><p><b>Why it matters:</b> Production inputs can have unusual variations amongst many different dimensions, ranging from lighting changes to sensor errors to compression artifacts. It is important that your models are robust to the introduction of such variations.</p>

### Contrast Decrease
<p>This test measures the robustness of your model to Contrast Decrease transformations. It does this by taking a sample input, decrease image contrast, and measuring the behavior of the model on the transformed input.</p><p><b>Why it matters:</b> Production inputs can have unusual variations amongst many different dimensions, ranging from lighting changes to sensor errors to compression artifacts. It is important that your models are robust to the introduction of such variations.</p>

### Add Rain
<p>This test measures the robustness of your model to Add Rain transformations. It does this by taking a sample input, adding rain texture to the image, and measuring the behavior of the model on the transformed input.</p><p><b>Why it matters:</b> Production inputs can have unusual variations amongst many different dimensions, ranging from lighting changes to sensor errors to compression artifacts. It is important that your models are robust to the introduction of such variations.</p>

### Add Snow
<p>This test measures the robustness of your model to Add Snow transformations. It does this by taking a sample input, adding snow texture to the image, and measuring the behavior of the model on the transformed input.</p><p><b>Why it matters:</b> Production inputs can have unusual variations amongst many different dimensions, ranging from lighting changes to sensor errors to compression artifacts. It is important that your models are robust to the introduction of such variations.</p>

## Drift

### Correlation Drift (Feature-to-Feature)
<p>This test measures the severity of feature-feature correlation drift from the reference to the evaluation set for a given pair of features. The severity is a function of the correlation drift in the data. The key detail is the difference in correlation scores between the reference and evaluation sets, along with an associated p-value. Correlation is a measure of the linear relationship between two numeric columns (feature-feature) so this test checks for significant changes in this relationship between each feature-feature in the reference and evaluation sets. To compute the p-value, we use Fisher's z-transformation to convert the distribution of sample correlations to a normal distribution, and then we run a standard two-sample test on two normal distributions.</p><p><b>Why it matters:</b> Correlation drift between training and inference can be caused by a variety of factors, including a change in the data generation process or a change in the underlying processing stage. A big shift in these dependencies could indicate shifting datasets and degradation in model performance, signaling the need for relabeling and retraining.</p><p><b>Configuration:</b> By default, this test runs over all pairs of features in the dataset.</p><p><b>Example:</b> Suppose that the correlation between <span>country</span> and <span>state</span> is 0.5 in the reference set but 0.7 in the evaluation set, and the p-value is 0.03. Then the large difference in scores indicates that the dependency between the two features has drifted. If our difference threshold was 0.2, and p-value threshold was 0.05, then the test would fail.</p>

### Correlation Drift (Feature-to-Label)
<p>This test measures the severity of feature-label correlation drift from the reference to the evaluation set for a given pair of a feature and label. The severity is a function of the correlation drift in the data. The key detail is the difference in correlation scores between the reference and evaluation sets, along with an associated p-value. Correlation is a measure of the linear relationship between two numeric columns (feature-label) so this test checks for significant changes in this relationship between each feature-label in the reference and evaluation sets. To compute the p-value, we use Fisher's z-transformation to convert the distribution of sample correlations to a normal distribution, and then we run a standard two-sample test on two normal distributions.</p><p><b>Why it matters:</b> Correlation drift between training and inference can be caused by a variety of factors, including a change in the data generation process or a change in the underlying processing stage. A big shift in these dependencies could indicate shifting datasets and degradation in model performance, signaling the need for relabeling and retraining.</p><p><b>Configuration:</b> By default, this test runs over all pairs of features and labels in the dataset.</p><p><b>Example:</b> Suppose that the correlation between <span>LotArea</span> and <span>SalePrice</span> is 0.4 in the reference set but 0.8 in the evaluation set, and the p-value is 0.15. Then the large difference in scores indicates that the impact of the feature on the label has drifted. If our difference threshold was 0.2, and p-value threshold was 0.05, then the test would fail.</p>

### Mutual Information Drift (Feature-to-Feature)
<p>This test measures the severity of feature mutual information drift from the reference to the evaluation set for a given pair of features. The severity is a function of the mutual information drift in the data. The key detail is the difference in mutual information scores between the reference and evaluation sets. Mutual information is a measure of how dependent two features are, so this checks for significant changes in dependence between pairs of features in the reference and evaluation sets.</p><p><b>Why it matters:</b> Mutual information drift between training and inference can be caused by a variety of factors, including a change in the data generation process or a change in the underlying processing stage. A big shift in these dependencies could indicate shifting datasets and degradation in model performance, signaling the need for relabeling and retraining.</p><p><b>Configuration:</b> By default, this test runs over all pairs of features in the dataset.</p><p><b>Example:</b> Suppose that the mutual information between <span>country</span> and <span>state</span> is 0.5 in the reference set but 0.7 in the evaluation set. Then the large difference in scores indicates that the dependency between the two features has drifted. If our difference threshold was 0.2 then the test would fail.</p>

### Mutual Information Drift (Feature-to-Label)
<p>This test measures the severity of feature mutual information drift from the reference to the evaluation set for a given pair of features. The severity is a function of the mutual information drift in the data. The key detail is the difference in mutual information scores between the reference and evaluation sets. Mutual information is a measure of how dependent two features are, so this checks for significant changes in dependence between pairs of features in the reference and evaluation sets.</p><p><b>Why it matters:</b> Mutual information drift between training and inference can be caused by a variety of factors, including a change in the data generation process or a change in the underlying processing stage. A big shift in these dependencies could indicate shifting datasets and degradation in model performance, signaling the need for relabeling and retraining.</p><p><b>Configuration:</b> By default, this test runs over all pairs of features in the dataset.</p><p><b>Example:</b> Suppose that the mutual information between <span>country</span> and <span>state</span> is 0.5 in the reference set but 0.7 in the evaluation set. Then the large difference in scores indicates that the dependency between the two features has drifted. If our difference threshold was 0.2 then the test would fail.</p>

### Label Drift (Categorical)
<p>This test checks that the difference in label distribution between the reference and evaluation sets is small, using PSI test. The key detail displayed is the PSI statistic which is a measure of how different the frequencies of the column in the reference and evaluation sets are.</p><p><b>Why it matters:</b> Label distribution shift between reference and test can indicate that the underlying data distribution has changed significantly enough to modify model decisions. This may mean that the model needs to be retrained to adjust to the new data environment. In addition, significant label distribution shift may indicate that upstream decision-making modules (e.g. thresholds) may need to be updated.</p><p><b>Configuration:</b> This test is run by default whenever both the reference and evaluation sets have associated labels.</p><p><b>Example:</b> Suppose that the observed frequencies of the label column is [100, 200] in the reference set but [25, 150] in the test set. Then the PSI would be 0.201. If our PSI threshold was 0.1 then the test would fail.</p>

### Predicted Label Drift
<p>This test checks that the difference in predicted label distribution between the reference and evaluation sets is small, using PSI test. The key detail displayed is the PSI statistic which is a measure of how different the frequencies of the column in the reference and evaluation sets are.</p><p><b>Why it matters:</b> Predicted Label distribution shift between reference and test can indicate that the underlying data distribution has changed significantly enough to modify model decisions. This may mean that the model needs to be retrained to adjust to the new data environment. In addition, significant predicted label distribution shift may indicate that upstream decision-making modules (e.g. thresholds) may need to be updated.</p><p><b>Configuration:</b> This test is run by default whenever the model or predictions is provided.</p><p><b>Example:</b> Suppose that the observed frequencies of the predicted label column is [100, 200] in the reference set but [25, 150] in the test set. Then the PSI would be 0.201. If our PSI threshold was 0.1 then the test would fail.</p>

### Label Drift (Regression)
<p>This test checks that the difference in label distribution between the reference and evaluation sets is small, using the PSI test. The key detail displayed is the KS statistic which is a measure of how different the labels in the reference and evaluation sets are. Concretely, the KS statistic is the maximum difference of the empirical CDF's of the two label columns.</p><p><b>Why it matters:</b> Label distribution shift between reference and test can indicate that the underlying data distribution has changed significantly enough to modify model decisions. This may mean that the model needs to be retrained to adjust to the new data environment. In addition, significant label distribution shift may indicate that upstream decision-making modules (e.g. thresholds) may need to be updated.</p><p><b>Configuration:</b> This test is run by default whenever both the reference and evaluation sets have associated labels.</p><p><b>Example:</b> Suppose that the distribution of labels changes between the reference and evaluation sets such that PSI these two samples is <span>0.2</span>. If the PSI threshold is <span>0.1</span>, then this test would raise a warning.</p>

### Feature Drift
<p>This test measures the change in the distribution of a feature by comparing the distribution in an evaluation set to a reference set. The test severity is a function of both the degree to which the distribution has changed and the estimated impact the observed drift has had on model performance.</p><p><b>Why it matters:</b> Distribution shift between training and inference can cause degradation in model performance. If the shift is sufficiently large, retraining the model on newer data may be necessary.</p><p><b>Configuration:</b> By default, this test runs over all feature columns with sufficiently many samples in both the reference and evaluation sets.</p><p><b>Example:</b> Suppose that the distribution of a feature <span>Age</span> shifts between the reference and evaluation sets such that the PSI between these two samples is <span>0.2</span>. If PSI is configured as the drift statistic for numeric features and the PSI warning threshold is set to <span>0.1</span>, this test would raise a warning.</p>

### Prediction Drift
<p>This test checks that the difference in the prediction distribution between the reference and evaluation sets is small, using Population Stability Index. The key detail displayed is the PSI which is a measure of how different the prediction distributions in the reference and evaluation sets are.</p><p><b>Why it matters:</b> Prediction distribution shift between reference and test can indicate that the underlying data distribution has changed significantly enough to modify model decisions. This may mean that the model needs to be retrained to adjust to the new data environment. In addition, significant prediction distribution drift may indicate that upstream decision-making modules (e.g. thresholds) may need to be updated.</p><p><b>Configuration:</b> This test is run by default whenever both the reference and evaluation sets have associated predictions. Different thresholds are associated with different severities.</p><p><b>Example:</b> Suppose that the PSI between the prediction distributions in the reference and evaluation sets is 0.201. Then if the PSI thresholds are (0.1, 0.2, 0.3), the test would fail with medium severity.</p>

### Embedding Drift
<p>This test measures the severity of passing to the model data points associated with embeddings that have drifted from the distribution observed in the reference set. The severity is a function of the impact on the model, as well as the presence of drift in the data. The model impact measures how much model performance changes due to drift in the given feature. The key detail is the Euclidean Distance statistic. The Euclidean Distance is defined as the square root of the sum of the squared differences between two vectors X and Y. The normalized version of this metric first divides each vector by its L2 norm. This test takes the normalized Euclidean distance between the centroids of the ref and eval data sets.</p><p><b>Why it matters:</b> Distribution shift between training and inference can cause degradation in model performance. If the shift is sufficiently large, retraining the model on newer data may be necessary.</p><p><b>Configuration:</b> By default, this test runs over all specified embeddings with sufficiently many samples in each of the reference and evaluation sets.</p><p><b>Example:</b> Suppose that the distribution of an embedding <span>User</span> changes between the reference and evaluation sets such that the Euclidean Distance between these two samples is <span>0.3</span>. If the distance threshold is set to <span>0.1</span>, this test would raise a warning.</p>

### Nulls Per Feature Drift
<p>This test measures the severity of passing to the model data points that have features with a null proportion that has drifted from the distribution observed in the reference set. The severity is a function of the impact on the model, as well as the presence of drift in the data. The model impact measures how much model performance changes due to drift in the given feature. The key detail is the p-value from a two-sample proportion test that checks if there is a statistically significant difference in the frequencies of null values between the reference and evaluation sets.</p><p><b>Why it matters:</b> Distribution drift in null values between training and inference can be caused by a variety of factors, including a change in the data generation process or a change in the preprocessing pipeline. A big shift in null value proportion could indicate a degradation in model performance and signal the need for relabeling and retraining. </p><p><b>Configuration:</b> By default, this test runs over all columns with sufficiently many samples. </p><p><b>Example:</b> Suppose that the observed frequencies of the null values for a given feature is 100/2000 in the reference set but 100/1500 in the test. Then the p-value would be 0.0425. If our p-value threshold was 0.05 then the test would fail.</p>

### Nulls Per Row Drift
<p>This test measures the severity of passing to the model data points that have proportions of null values that have drifted from the distribution observed in the reference set. The severity is a function of the impact on the model, as well as the presence of drift in the data. The model impact measures how much predictions change when the observed drift is applied to a given row. The key detail displayed is the PSI statistic that is a measure of how statistically significant the difference in the proportion of null values in a row between the reference and evaluation sets is.</p><p><b>Why it matters:</b> Distribution drift in null values between training and inference can be caused by a variety of factors, including a change in the data generation process or a change in the preprocessing pipeline. A big shift in null value proportion could indicate a degradation in model performance and signal the need for relabeling and retraining.</p><p><b>Configuration:</b> By default, this test runs over all rows.</p><p><b>Example:</b> Suppose that in the reference set 5% of rows had more than three features that were null. If we observe in the evaluation set that now 50% of rows had more than three features that were null, this test would fail, highlighting a large drift in the proportion of features within a row that were null.</p>

## Attacks

### Single-Feature Changes
<p>This test measures the severity of passing to the model data points that have been manipulated across a single feature in an unbounded manner. The severity is a function of the impact of these manipulations on the model.</p><p><b>Why it matters:</b> In production, your model will likely come across inputs that are out-of-distribution with respect to the training data, and it is often difficult to know ahead of time how your model will behave on such inputs. 'Attacking' a model in the manner of this test is a technique for finding the out-of-distribution regions of the input space where your model most severely misbehaves, <i>before</i> putting it into production. Rstricting ourselves to changing a single feature at a time is one proxy for what 'realistic' out-of-distribution data can look like.</p><p><b>Configuration:</b> By default, for a given input we aim to change your model's prediction in the opposite direction of the true label. This test raises a warning if the average prediction change that can be achieved exceeds an acceptable threshold.</p><p><b>Example:</b> Suppose your model has an <span>Age</span> feature with observed range <span>0</span> to <span>120</span>. For every row in some sample, this test would search for the value of <span>Age</span> in <span>0</span> to <span>120</span> that caused the maximal change in prediction in the desired direction.</p>

### Bounded Single-Feature Changes
<p>This test measures the severity of passing to the model data points that have been manipulated across a single feature in a bounded manner. The severity is a function of the impact of these manipulations on the model.We bound the manipulations to be less than some fraction of the range of the given feature.</p><p><b>Why it matters:</b> In production, your model will likely come across inputs that are out-of-distribution with respect to the training data, and it is often difficult to know ahead of time how your model will behave on such inputs. 'Attacking' a model in the manner of this test is a technique for finding the out-of-distribution regions of the input space where your model most severely misbehaves, <i>before</i> putting it into production. Restricting ourselves to changing a single feature by a small amount is one proxy for what 'realistic' out-of-distribution data can look like.</p><p><b>Configuration:</b> By default, for a given input we aim to change your model's prediction in the opposite direction of the true label. This test raises a warning if the average prediction change that can be achieved exceeds an acceptable threshold. This test runs only over numeric features.</p><p><b>Example:</b> Suppose your model has an <span>Age</span> feature with observed range <span>0</span> to <span>120</span>, and we restricted ourselves to changes that were no greater than <span>10</span>% of the feature range. For every row in some sample, this test would search for the value of <span>Age</span> that was at most <span>12</span> away from the row's initial <span>Age</span> value and that caused the maximal change in prediction in the desired direction.</p>

### Multi-Feature Changes
<p>This test measures the severity of passing to the model data points that have been manipulated across multiple features in an unbounded manner. The severity is a function of the impact of these manipulations on the model.</p><p><b>Why it matters:</b> In production, your model will likely come across inputs that are out-of-distribution with respect to the training data, and it is often difficult to know ahead of time how your model will behave on such inputs. 'Attacking' a model in the manner of this test is a technique for finding the out-of-distribution regions of the input space where your model most severely misbehaves, <i>before</i> putting it into production. Restricting the number of features that can be changed is one proxy for what 'realistic' out-of-distribution data can look like.</p><p><b>Configuration:</b> By default, for a given input we aim to change your model's prediction in the opposite direction of the true label. This test raises a warning if the average prediction change that can be achieved exceeds an acceptable threshold.</p><p><b>Example:</b> Suppose we restricted ourselves to changing <span>5</span> features. This means for each input we would search for the <span>5</span> feature values change that, when performed together, caused the largest possible change in your model's prediction on that input.</p>

### Bounded Multi-Feature Changes
<p>This test measures the severity of passing to the model data points that have been manipulated across multiple features in an bounded manner. The severity is a function of the impact of these manipulations on the model.We bound the manipulations to be less than some fraction of the range of the given feature.</p><p><b>Why it matters:</b> In production, your model will likely come across inputs that are out-of-distribution with respect to the training data, and it is often difficult to know ahead of time how your model will behave on such inputs. 'Attacking' a model in the manner of this test is a technique for finding the out-of-distribution regions of the input space where your model most severely misbehaves, <i>before</i> putting it into production. Restricting the number of features that can be changed and the magnitude of the change that can be made to each feature is one proxy for what 'realistic' out-of-distribution data can look like.</p><p><b>Configuration:</b> By default, for a given input we aim to change your model's prediction in the opposite direction of the true label. This test raises a warning if the average prediction change that can be achieved exceeds an acceptable threshold. This test runs only over numeric features.</p><p><b>Example:</b> Suppose we restricted ourselves to changing <span>5</span> features, each by no more than <span>10</span>% of the range of the given feature. This means for each input we would search for the <span>5</span> restricted feature values change that, when performed together, caused the largest possible change in your model's prediction on that input.</p>

### HopSkipJump Attack
<p>This test measures the robustness of your model to HopSkipJump attacks. It does this by taking a sample of inputs, applying a HopSkipJump attack to each input, and measuring the performance of the model on the perturbed input. See the paper  "HopSkipJumpAttack: A Query-Efficient Decision-Based Attack" by Chen, et al. (https://arxiv.org/abs/1904.02144) for more details.</p><p><b>Why it matters:</b> Malicious actors can perturb input data to alter model behavior in unexpected ways. It is important that your models are robust to such attacks.</p><p><b>Configuration:</b> By default, this test runs when the "Attacks" test category is selected.</p>

### Invisible Character Attack
<p>This test measures the robustness of your model to invisible character attacks. It does this by taking a sample input, inserting zero-width unicode characters, and measuring the performance of the model on the perturbed input. See the paper  "Fall of Giants: How Popular Text-Based MLaaS Fall against a Simple Evasion Attack" by Pajola and Conti (https://arxiv.org/abs/2104.05996) for more details.</p><p><b>Why it matters:</b> Malicious actors can perturb natural language input sequences to  alter model behavior in unexpected ways. It is important that your NLP models are robust to such attacks.</p><p><b>Configuration:</b> By default, this test runs when the "Attacks" test category is selected.</p><p><b>Example:</b> Given the input sequence "RIME is helpful.", this test measures the performance of the model when imperceptibly perturbed (e.g.,  when changed to "RIM‌E is hel​p‍ful.")</p>

### Deletion Control Character Attack
<p>This test measures the robustness of your model to deletion control character attacks. It does this by taking a sample input, inserting deletion control characters, and measuring the performance of the model on the perturbed input. See the paper  "Bad Characters: Imperceptible NLP Attacks" by Boucher, Shumailov, et al. (https://arxiv.org/abs/2106.09898) for more details.</p><p><b>Why it matters:</b> Malicious actors can perturb natural language input sequences to  alter model behavior in unexpected ways. It is important that your NLP models are robust to such attacks.</p><p><b>Configuration:</b> By default, this test runs when the "Attacks" test category is selected.</p><p><b>Example:</b> Given the input sequence "RIME is helpful.", this test measures the performance of the model when imperceptibly perturbed (e.g.,  when changed to "RIM‌E is hel​p‍ful.")</p>

### Intentional Homoglyph Attack
<p>This test measures the robustness of your model to intentional homoglyph attacks. It does this by taking a sample input, substituting homoglyphs designed to look like other characters, and measuring the performance of the model on the perturbed input. See the paper  "Bad Characters: Imperceptible NLP Attacks" by Boucher, Shumailov, et al. (https://arxiv.org/abs/2106.09898) for more details.</p><p><b>Why it matters:</b> Malicious actors can perturb natural language input sequences to  alter model behavior in unexpected ways. It is important that your NLP models are robust to such attacks.</p><p><b>Configuration:</b> By default, this test runs when the "Attacks" test category is selected.</p><p><b>Example:</b> Given the input sequence "RIME is helpful.", this test measures the performance of the model when imperceptibly perturbed (e.g.,  when changed to "RIM‌E is hel​p‍ful.")</p>

### Confusable Homoglyph Attack
<p>This test measures the robustness of your model to confusable homoglyph attacks. It does this by taking a sample input, substituting homoglyphs that are easily confused with other characters, and measuring the performance of the model on the perturbed input. See the paper  "Bad Characters: Imperceptible NLP Attacks" by Boucher, Shumailov, et al. (https://arxiv.org/abs/2106.09898) for more details.</p><p><b>Why it matters:</b> Malicious actors can perturb natural language input sequences to  alter model behavior in unexpected ways. It is important that your NLP models are robust to such attacks.</p><p><b>Configuration:</b> By default, this test runs when the "Attacks" test category is selected.</p><p><b>Example:</b> Given the input sequence "RIME is helpful.", this test measures the performance of the model when imperceptibly perturbed (e.g.,  when changed to "RIM‌E is hel​p‍ful.")</p>

### Universal Prefix Attack
<p>This test measures the robustness of your model to 'universal' adversarial prefix injections. It does this by sampling a batch of inputs, and searching over the model vocabulary to find a prefix that is nonsensical to a reader but that, when prepended to the batch of inputs, will cause the model to output a different prediction. See the paper  "Universal Adversarial Triggers for Attacking and Analyzing NLP" by Wallace, Feng, Kandpal, et al. (https://arxiv.org/abs/1908.07125) for more details.</p><p><b>Why it matters:</b> Malicious actors can perturb natural language input sequences to  alter model behavior in unexpected ways. 'Universal triggers'  pose a particularly large threat since they easily transfer between models and data points to permit an adversary to make large-scale, cost-efficient attacks. It is important that your NLP models are robust to such threat vectors.</p><p><b>Configuration:</b> By default, this test runs when the 'Adversarial' category is specified.</p><p><b>Example:</b> Given a target class of 0, this test selects a batch of inputs for which the model predicts a different class (e.g., 1). It then searches for an adversarial prefix that maximizes the probability assigned to the target class. The severity of this test is based on the difference in the average probability assigned to the target class before and after the prefix is prepended to the batch. For instance, given two inputs "I am happy!" and "I like ice cream!", the attack finds an example prefix, e.g., "the why y could", and measures the new probability assigned by the model to the target class for inputs "the why y could I am happy!" and "the why y could I like ice cream!".</p>

### Image HopSkipJump Attack
<p>This test measures the robustness of your model to Image HopSkipJump attacks. It does this by taking a sample input, applying a HopSkipJump attack, and measuring the performance of the model on the perturbed input. See the paper  "HopSkipJumpAttack: A Query-Efficient Decision-Based Attack" by Chen, et al. (https://arxiv.org/abs/1904.02144) for more details.</p><p><b>Why it matters:</b> Malicious actors can perturb input images to  alter model behavior in unexpected ways. It is important that your Computer Vision models are robust to such attacks.</p><p><b>Configuration:</b> By default, this test runs when the "Attacks" test category is selected.</p>

### Square Attack
<p>This test measures the robustness of your model to Square attacks. It does this by taking a sample input, applying a Square attack, and measuring the performance of the model on the perturbed input. See the paper  "Square Attack: a query-efficient black-box adversarial attack via random search" by Andriushchenko, Croce, et al. (https://arxiv.org/abs/1912.00049) for more details.</p><p><b>Why it matters:</b> Malicious actors can perturb input images to  alter model behavior in unexpected ways. It is important that your Computer Vision models are robust to such attacks.</p><p><b>Configuration:</b> By default, this test runs when the "Attacks" test category is selected.</p>

## Data Cleanliness

### Label Imbalance
<p>This test checks that no labels have exceedingly high frequency.</p><p><b>Why it matters:</b> Label imbalance in the training data can introduce bias into the model and possibly result in poor predictive performance on examples from the minority classes.</p><p><b>Configuration:</b> This test runs only on classification tasks.</p><p><b>Example:</b> Suppose we had a binary classification task. We can configure this test to check that neither label <span>0</span> nor <span>1</span> has frequency above a certain threshold.</p>

### Required Features
<p>This test checks that the features of a dataset are as expected.</p><p><b>Why it matters:</b> Errors in data collection and processing can lead to invalid missing (or extra) features. In the case of missing features, this can cause failures in models. In the case of extra features, this can lead to unnecessary storage and computation.</p><p><b>Configuration:</b> This test runs only when required features are specified.</p><p><b>Example:</b> Suppose we had a few features (<span>Age</span>, <span>Location</span>, etc.) that we always expected to be present in the dataset. We can configure this test to check that those columns are there.</p>

### Duplicate Row
<p>This test checks if there are any duplicate rows in your dataset. The key detail displays the number of duplicate rows in your dataset.</p><p><b>Why it matters:</b> Duplicate rows are potentially a sign of a broken data pipeline or an otherwise corrupted input.</p><p><b>Configuration:</b> By default this test is run over all features, meaning two rows are considered duplicates only if they match across all features.</p><p><b>Example:</b> Suppose we had two rows that were the same across every feature except an <span>ID</span> feature. By default these two rows would not be flagged as duplicates. If we exclude the <span>ID</span> feature, then these two rows would be flagged as duplicates.</p>

### Mutual Information Decrease (Feature to Label)
<p>This test flags a likely data leakage issue in the model.Data leakage occurs when a model is trained on features containing information about the label that is not normally present during production.This test flags an issue if both of the following occur:<ul><li>the normalized mutual information between the feature and the label is too high in the reference set</li><li>the normalized mutual information for the reference set is much higher than for the evaluation set</li></ul> The first criterion is an indicator that the feature has unreasonably high predictive power for the label during training, and the second criterion checks that the feature is no longer a good predictor in the evaluation set. One requirement for this test to flag data leakage is that the evaluation set labels and features are collected properly. This test should be utilized if one trusts their eval data is collected correctly, else the High MI test should be used.</p><p><b>Why it matters:</b> Errors in data collection and processing can lead to some features containing information about the label in the reference set that do not appear in the evaluation set. This causes the model to under-perform during production.</p><p><b>Configuration:</b> By default, this test always runs on all categorical features.</p><p><b>Example:</b> Consider a lending model that is trying to predict a boolean variable <span>loan given</span> that reports whether or not a bank will issue this loan to a potential borrower, and suppose one of the features is <span>total debt over 50K</span>. An error during the data processing causes the model to be trained on a data set where <span>total debt over 50K</span> is calculated after the loan has already been given, resulting in the model predicting <span>loan given</span> to be true whenever <span>total debt over 50K</span> is large. However, when the model is deployed, the feature <span>total debt</span> must be calculated before the <span>loan given</span> prediction can be made.<br> The normalized mutual information between these columns might be 0.3 in the reference set but only 0.1 in the evaluation set. This test would then flag a likely feature leakage issue where <span>total debt over 50K</span> is leaking into the variable <span>loan given</span> during training.</p>

### High Mutual Information (Feature to Label)
<p>This test flags a likely data leakage issue if the normalized mutual information between the feature and the label is too high in the reference set. Data leakage occurs when a model is trained on features containing information about the label that is not normally present during production. This criterion is an indicator that this feature has unreasonably high predictive power for the label during training. One requirement for this test to flag data leakage is that the reference set labels and features are collected properly. This test should be utilized when one doesn't trust their eval data is collected correctly, else the MI Decrease test should be used.</p><p><b>Why it matters:</b> Errors in data collection and processing can lead to some features containing information about the label in the reference set. This causes the model to under-perform during production.</p><p><b>Configuration:</b> By default, this test always runs on all categorical features.</p><p><b>Example:</b> Consider a lending model that is trying to predict a boolean variable <span>loan given</span> that reports whether or not a bank will issue this loan to a potential borrower, and suppose one of the features is <span>total debt over 50K</span>. An error during the data processing causes the model to be trained on a data set where <span>total debt over 50K</span> is calculated after the loan has already been given, resulting in the model predicting <span>loan given</span> to be true whenever <span>total debt over 50K</span> is true. The normalized mutual information between these columns might be 0.8 in the reference set, due to the data leakage phenomenon. This test would then flag a likely feature leakage issue where <span>total debt over 50K</span> is leaking into the variable <span>loan given</span> during training.</p>

### High Feature Correlation
<p>This test checks that the correlation between two features in the reference set is not too high. Correlation is a measure of the linear relationship between two numeric features.</p><p><b>Why it matters:</b> Correlation in training features can be caused by a variety of factors, including interdependencies between the collected features, data collection processes, or change in data labeling. Training on too similar features can lead to underperforming or non-robust models.</p><p><b>Configuration:</b> By default, this test runs over all pairs of numeric features in the dataset.</p><p><b>Example:</b> Suppose that the correlation between <span>age</span> and <span>years of employment</span> is 0.9 in the reference set. Because of the high correlation between this pair of features, you might not want to train a model across both of them, and this test would fail. </p>

## Subset Performance

### Subset Macro F1
<p>F1 is a holistic measure of both precision and recall. When transitioning to the multiclass setting we can use macro F1 which computes the F1 of each class and averages them. This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the macro F1 of model predictions within a specific subset is significantly lower than the model prediction macro F1 over the entire population. </p><p><b>Why it matters:</b> Having different macro F1 between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. </p><p><b>Configuration:</b> By default, macro F1 is computed over all predictions/labels. Note that the predicted label is the label with the largest predicted probability.</p><p><b>Example:</b> Suppose we are differentiating between cats, bears, and dogs. Assume that across the data points where <span>height=2</span> the predictions are <span>[0.9, 0.1, 0], [0.1, 0.9, 0], [0.2, 0.1, 0.7]</span> and the labels are <span>[1, 0, 0], [1, 0, 0], [0, 0, 1]</span> (where the first index corresponds to cat, the second corresponds to bear, and the third corresponds to dog). Then the macro F1 across this subset is <span>0.78</span>. If the overall macro F1 across all subsets is <span>0.9</span> then this test raises a warning.</p>

### Subset Root-Mean-Squared Error (RMSE)
<p>This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the RMSE of model predictions within a specific subset is significantly higher than the model prediction RMSE over the entire population. </p><p><b>Why it matters:</b> Having different RMSE between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. </p><p><b>Configuration:</b> By default, RMSE is computed over all predictions/labels. </p><p><b>Example:</b> Suppose we had data with 2 features: <span>[[0.4, 0.2], [0.5, 0.3], [0.7, 0.5], [0.6, 0.7], [0.8, 0.7]]</span>, model predictions <span>[0.3, 0.4, 0.8, 0.8, 0.9]</span>, and labels <span>[0.5, 0.5, 1.5, 1.5, 1.5]</span>. Then, the RMSE over the feature subset (0.0, 0.5] for the first feature would be 0.158, compared to the overall metric of 0.527.</p>

### Subset Prediction Variance


### Subset Multiclass Accuracy
<p>This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the accuracy of model predictions within a specific subset is significantly lower than the model prediction accuracy over the entire population. </p><p><b>Why it matters:</b> Having different accuracy between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. Accuracy can be thought of as a 'weaker' metric of model bias compared to measuring false positive rate (predictive equality) or false negative rate (equal opportunity). This is because we can have similar accuracy between group A and group B; yet group A actually has higher false positive rate, while group B has higher false negative rate (e.g. we reject qualified applicants in group A but accept non-qualified applicants in group B). Nevertheless, accuracy is a standard metric used during evaluation and should be considered as part of performance bias testing.</p><p><b>Configuration:</b> By default, accuracy is computed over all predictions/labels. Note we round predictions to 0/1 to compute accuracy.</p><p><b>Example:</b> Suppose we had data with 2 features: <span>[['cat', 0.2], ['dog', 0.3], ['cat', 0.5], ['dog', 0.7], ['cat', 0.7], ['dog', 0.2]]</span>, model predictions <span>[0.3, 0.51, 0.7, 0.49, 0.9, 0.58]</span>, and labels <span>[1, 0, 1, 0, 0, 1]</span>. Then, the accuracy over the feature subset value 'cat' would be 0.33, compared to the overall metric of 0.5.</p>

### Subset F1
<p>This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the F1 of model predictions within a specific subset is significantly lower than the model prediction F1 over the entire population. </p><p><b>Why it matters:</b> Having different F1 between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. </p><p><b>Configuration:</b> By default, F1 is computed over all predictions/labels. Note that we round predictions to 0/1 to compute F1 score.</p><p><b>Example:</b> Suppose we had data with 2 features: <span>[['cat', 0.2], ['dog', 0.3], ['cat', 0.5], ['dog', 0.7], ['cat', 0.7], ['dog', 0.2]]</span>, model predictions <span>[0.3, 0.51, 0.7, 0.49, 0.9, 0.58]</span>, and labels <span>[1, 0, 1, 0, 0, 1]</span>. Then, the F1 over the feature subset value 'cat' would be 0.5, compared to the overall metric of 0.57.</p>

### Subset Prediction Variance (Negative Labels)
<p>The subset variance test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the variance of model predictions within a specific subset is significantly higher than model prediction variance of the entire population. In this test, the population refers to all data with negative ground-truth labels.</p><p><b>Why it matters:</b> High variance within a feature subset compared to the overall population could mean a few different things, and should be analyzed with other subset performance tests (accuracy, AUC) for a more clear view. In the variance metric over positive/negative labels, this could mean the model is much more uncertain about the given subset. When paired with a decrease in AUC, this implies the model underperforms on this subset.</p><p><b>Configuration:</b> By default, the variance is computed over all predictions with a negative ground-truth label.</p><p><b>Example:</b> Suppose we had data with 2 features: [['cat', 0.2], ['dog', 0.3], ['cat', 0.5], ['dog', 0.7], ['cat', 0.7], ['dog', 0.2]] and model predictions [0.3, 0.51, 0.7, 0.49, 0.9, 0.48]. Assume the labels are [1, 0, 1, 0, 0, 0].Then the prediction variance for feature column 1, subset 'cat' with negative labels would be 0.</p>

### Subset Macro Recall
<p>The recall test is more popularly referred to as equal opportunity or false negative error rate balance in fairness literature. When transitioning to the multiclass setting we can use macro recall which computes the recall of each individual class and then averages these numbers.This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the Macro Recall of model predictions within a specific subset is significantly lower than the model prediction Macro Recall over the entire population. </p><p><b>Why it matters:</b> Having different true positive rates (e.g. equal opportunity) between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. Unlike demographic parity, this test permits assuming different base label rates but flags differing mistake rates between different subgroups. An intuitive example is when the label indicates a positive attribute: if predicting whether to interview a given candidate, make sure that out of qualified candidates, the rate at which the model predicts an interview is similar to group A and B. </p><p><b>Configuration:</b> By default, Macro Recall is computed over all predictions/labels. Note that the predicted label is the label with the largest predicted class probability.</p><p><b>Example:</b> Suppose we are differentiating between cats, bears, and dogs. Assume that across the data points where <span>height=2</span> the predictions are <span>[0.9, 0.1, 0], [0.1, 0.9, 0], [0.2, 0.1, 0.7]</span> and the labels are <span>[1, 0, 0], [1, 0, 0], [0, 0, 1]</span> (where the first index corresponds to cat, the second corresponds to bear, and the third corresponds to dog). Then the Macro Recall across this subset is <span>0.67</span>. If the overall Macro Recall across all subsets is <span>0.9</span> then this test raises a warning.</p>

### Subset False Positive Rate
<p>The false positive error rate test is also popularly referred to as as predictive equality, or equal mis-opportunity in fairness literature. This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the false positive rate of model predictions within a specific subset is significantly higher than the model prediction false positive rate over the entire population. </p><p><b>Why it matters:</b> Having different false positive rates (e.g. predictive equality) between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. Unlike demographic parity, this test permits assuming different base label rates but flags differing mistake rates between different subgroups. As an intuitive example, consider the case when the label indicates an undesirable attribute: if predicting whether a person will default on their loan, make sure that for people who didn't default, the rate at which the model incorrectly predicts positive is similar for group A and B. </p><p><b>Configuration:</b> By default, false positive rate is computed over all predictions/labels. Note that we round predictions to 0/1 to compute false positive rate.</p><p><b>Example:</b> Suppose we had data with 2 features: <span>[['cat', 0.2], ['dog', 0.3], ['cat', 0.5], ['dog', 0.7], ['cat', 0.7], ['dog', 0.2]]</span>, model predictions <span>[0.3, 0.51, 0.7, 0.49, 0.9, 0.58]</span>, and labels <span>[1, 0, 1, 0, 0, 1]</span>. Then, the false positive rate over the feature subset value 'cat' would be 1.0, compared to the overall metric of 0.67.</p>

### Subset F1
<p>This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the F1 of model predictions within a specific subset is significantly lower than the model prediction F1 over the entire population. </p><p><b>Why it matters:</b> Having different F1 between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. </p><p><b>Configuration:</b> By default, F1 is computed over all predictions/labels. </p><p><b>Example:</b> Suppose in our subset the ground truth has the following: <span>[Microsoft Corp.] CEO [Steve Ballmer] announced the release of [Windows 7] today</span> Suppose your actual extraction has the following: <span>[Microsoft Corp.] [CEO] [Steve] Ballmer announced the release of Windows 7 [today]</span> This has 1 true positive (<span>[Microsoft Corp.]</span>), 2 false negatives (<span>[Steve Ballmer], [Windows 7]</span>), and 3 false positives (<span>[Steve], [CEO], [today]</span>). This leads to a F1 of 0.25 on this subset of data. We then compare that to the overall F1 on the full dataset.</p>

### Subset Accuracy
<p>This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the accuracy of model predictions within a specific subset is significantly lower than the model prediction accuracy over the entire population. </p><p><b>Why it matters:</b> Having different accuracy between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. Accuracy can be thought of as a 'weaker' metric of model bias compared to measuring false positive rate (predictive equality) or false negative rate (equal opportunity). This is because we can have similar accuracy between group A and group B; yet group A actually has higher false positive rate, while group B has higher false negative rate (e.g. we reject qualified applicants in group A but accept non-qualified applicants in group B). Nevertheless, accuracy is a standard metric used during evaluation and should be considered as part of performance bias testing.</p><p><b>Configuration:</b> By default, accuracy is computed over all predictions/labels. Note we round predictions to 0/1 to compute accuracy.</p><p><b>Example:</b> Suppose we had data with 2 features: <span>[['cat', 0.2], ['dog', 0.3], ['cat', 0.5], ['dog', 0.7], ['cat', 0.7], ['dog', 0.2]]</span>, model predictions <span>[0.3, 0.51, 0.7, 0.49, 0.9, 0.58]</span>, and labels <span>[1, 0, 1, 0, 0, 1]</span>. Then, the accuracy over the feature subset value 'cat' would be 0.33, compared to the overall metric of 0.5.</p>

### Subset Precision
<p>This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the Precision of model predictions within a specific subset is significantly lower than the model prediction Precision over the entire population. </p><p><b>Why it matters:</b> Having different Precision between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. </p><p><b>Configuration:</b> By default, Precision is computed over all predictions/labels. </p><p><b>Example:</b> Suppose in our subset the ground truth has the following: <span>[Microsoft Corp.] CEO [Steve Ballmer] announced the release of [Windows 7] today</span> Suppose your actual extraction has the following: <span>[Microsoft Corp.] [CEO] [Steve] Ballmer announced the release of Windows 7 [today]</span> This has 1 true positive (<span>[Microsoft Corp.]</span>), 2 false negatives (<span>[Steve Ballmer], [Windows 7]</span>), and 3 false positives (<span>[Steve], [CEO], [today]</span>). This leads to a Precision of 0.25 on this subset of data. We then compare that to the overall Precision on the full dataset.</p>

### Subset F1
<p>This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the F1 of model predictions within a specific subset is significantly lower than the model prediction F1 over the entire population. </p><p><b>Why it matters:</b> Having different F1 between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. </p><p><b>Configuration:</b> By default, F1 is computed over all predictions/labels. </p><p><b>Example:</b> Suppose in our subset the ground truth has two cats and one dog in the image. Suppose your actual detection has two true positives (the cats), one false positive (it predicts a bird) and one false negative (does not predict the dog). This leads to a F1 of 0.66 on this subset of data. We then compare that to the overall F1 on the full dataset.</p>

### Subset Macro Precision
<p>The precision test is also popularly referred to as positive predictive parity in fairness literature. When transitioning to the multiclass setting, we can compute macro precision which computes the precisions of each class individually and then averages them.This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the Macro Precision of model predictions within a specific subset is significantly lower than the model prediction Macro Precision over the entire population. </p><p><b>Why it matters:</b> Having different macro precision (e.g. false discovery rates) between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. Unlike demographic parity, this test permits assuming different base label rates but flags differing mistake rates between different subgroups. Note that positive predictive parity does not necessarily indicate equal opportunity or predictive equality: as a hypothetical example, imagine that a loan qualification classifier flags 100 entries for group A and 100 entries for group B, each with a precision of 100%, but there are 100 actual qualified entries in group A and 9000 in group B. This would indicate disparities in opportunities given to each subgroup.</p><p><b>Configuration:</b> By default, Macro Precision is computed over all predictions/labels. Note that the predicted label is the label with the greatest predicted probability.</p><p><b>Example:</b> Suppose we are differentiating between cats, bears, and dogs. Assume that across the data points where <span>height=2</span> the predictions are <span>[0.9, 0.1, 0], [0.1, 0.9, 0], [0.2, 0.1, 0.7]</span> and the labels are <span>[1, 0, 0], [1, 0, 0], [0, 0, 1]</span> (where the first index corresponds to cat, the second corresponds to bear, and the third corresponds to dog). Then the Macro Precision across this subset is <span>0.67</span>. If the overall Macro Precision across all subsets is <span>0.9</span> then this test raises a warning.</p>

### Subset Precision
<p>This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the Precision of model predictions within a specific subset is significantly lower than the model prediction Precision over the entire population. </p><p><b>Why it matters:</b> Having different Precision between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. </p><p><b>Configuration:</b> By default, Precision is computed over all predictions/labels. </p><p><b>Example:</b> Suppose in our subset the ground truth has two cats and one dog in the image. Suppose your actual detection has two true positives (the cats), one false positive (it predicts a bird) and one false negative (does not predict the dog). This leads to a Precision of 0.66 on this subset of data. We then compare that to the overall Precision on the full dataset.</p>

### Subset Mean Reciprocal Rank (MRR)
<p>This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the MRR of model predictions within a specific subset is significantly lower than the model prediction MRR over the entire population. </p><p><b>Why it matters:</b> Having different MRR between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. </p><p><b>Configuration:</b> By default, MRR is computed over all predictions/labels. </p><p><b>Example:</b> Suppose we had the following query-document pairs: <span>[[(qid: 1), 'A'], [(qid: 1), 'A'], [(qid: 2), 'B'], [(qid: 2), 'B']]</span>, model predictions <span>[2, 1, 1, 2]</span>, and true relevance ranks <span>[1,2,1,2]</span>. Then, the MRR over the feature subset 'A' would be 0.5, compared to the overall metric of 0.75.</p>

### Subset Mean-Squared-Log Error (MSLE)


### Subset Average Confidence


### Subset Multiclass AUC
<p>In the multiclass setting, we compute one vs. one area under the curve (AUC), which computes the AUC between every pairwise combination of classes. This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the Area Under Curve (AUC) of model predictions within a specific subset is significantly lower than the model prediction Area Under Curve (AUC) over the entire population. </p><p><b>Why it matters:</b> Having different AUC between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. </p><p><b>Configuration:</b> By default, AUC is computed over all predictions/labels. Note that we compute AUC of the Receiver Operating Characteristic (ROC) curve.</p><p><b>Example:</b> Suppose we are differentiating between cats, bears, and dogs. Assume that across the data points where <span>height=2</span> the predictions are <span>[0.9, 0.1, 0], [0.1, 0.9, 0], [0.2, 0.1, 0.7]</span> and the labels are <span>[1, 0, 0], [1, 0, 0], [0, 0, 1]</span> (where the first index corresponds to cat, the second corresponds to bear, and the third corresponds to dog). Then the AUC (one vs. one) across this subset is <span>0.75</span>. If the overall AUC (one vs. one) across all subsets is <span>0.9</span> then this test raises a warning.</p>

### Subset Mean-Squared Error (MSE)


### Subset AUC
<p>This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the Area Under Curve (AUC) of model predictions within a specific subset is significantly lower than the model prediction Area Under Curve (AUC) over the entire population. </p><p><b>Why it matters:</b> Having different AUC between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. </p><p><b>Configuration:</b> By default, AUC is computed over all predictions/labels. Note that we compute AUC of the Receiver Operating Characteristic (ROC) curve.</p><p><b>Example:</b> Suppose we had data with 2 features: <span>[['cat', 0.2], ['dog', 0.3], ['cat', 0.5], ['dog', 0.7], ['cat', 0.7], ['dog', 0.2]]</span>, model predictions <span>[0.3, 0.51, 0.7, 0.49, 0.9, 0.58]</span>, and labels <span>[1, 0, 1, 0, 0, 1]</span>. Then, the AUC over the feature subset value 'cat' would be 0.0, compared to the overall metric of 0.44.</p>

### Subset Rank Correlation
<p>This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the rank correlation of model predictions within a specific subset is significantly lower than the model prediction rank correlation over the entire population. </p><p><b>Why it matters:</b> Having different rank correlation between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. </p><p><b>Configuration:</b> By default, rank correlation is computed over all predictions/labels. </p><p><b>Example:</b> Suppose we had the following query-document pairs: <span>[[(qid: 1), 'A'], [(qid: 1), 'A'], [(qid: 2), 'B'], [(qid: 2), 'B']]</span>, model predictions <span>[2, 1, 1, 2]</span>, and true relevance ranks <span>[1,2,1,2]</span>. Then, the rank correlation over the feature subset 'A' would be -1, compared to the overall metric of 0.</p>

### Subset Recall
<p>This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the Recall of model predictions within a specific subset is significantly lower than the model prediction Recall over the entire population. </p><p><b>Why it matters:</b> Having different Recall between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. </p><p><b>Configuration:</b> By default, Recall is computed over all predictions/labels. </p><p><b>Example:</b> Suppose in our subset the ground truth has two cats and one dog in the image. Suppose your actual detection has two true positives (the cats), one false positive (it predicts a bird) and one false negative (does not predict the dog). This leads to a Recall of 0.66 on this subset of data. We then compare that to the overall Recall on the full dataset.</p>

### Subset Positive Prediction Rate


### Subset Recall
<p>The recall test is more popularly referred to as equal opportunity or false negative error rate balance in fairness literature. This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the Recall of model predictions within a specific subset is significantly lower than the model prediction Recall over the entire population. </p><p><b>Why it matters:</b> Having different true positive rates (e.g. equal opportunity) between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. Unlike demographic parity, this test permits assuming different base label rates but flags differing mistake rates between different subgroups. An intuitive example is when the label indicates a positive attribute: if predicting whether to interview a given candidate, make sure that out of qualified candidates, the rate at which the model predicts a rejection is similar to group A and B. </p><p><b>Configuration:</b> By default, Recall is computed over all predictions/labels. Note that we round predictions to 0/1 to compute recall.</p><p><b>Example:</b> Suppose we had data with 2 features: <span>[['cat', 0.2], ['dog', 0.3], ['cat', 0.5], ['dog', 0.7], ['cat', 0.7], ['dog', 0.2]]</span>, model predictions <span>[0.3, 0.51, 0.7, 0.49, 0.9, 0.58]</span>, and labels <span>[1, 0, 1, 0, 0, 1]</span>. Then, the Recall over the feature subset value 'cat' would be 0.5, compared to the overall metric of 0.66.</p>

### Subset Normalized Discounted Cumulative Gain (NDCG)
<p>This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the NDCG of model predictions within a specific subset is significantly lower than the model prediction NDCG over the entire population. </p><p><b>Why it matters:</b> Having different NDCG between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. </p><p><b>Configuration:</b> By default, NDCG is computed over all predictions/labels. </p><p><b>Example:</b> Suppose we had the following query-document pairs: <span>[[(qid: 1), 'A'], [(qid: 1), 'A'], [(qid: 2), 'B'], [(qid: 2), 'B']]</span>, model predictions <span>[2, 1, 1, 2]</span>, and true relevance ranks <span>[1,2,1,2]</span>. Then, the NDCG over the feature subset 'A' would be 0.86, compared to the overall metric of 0.93.</p>

### Subset Average Rank


### Subset Precision
<p>The precision test is also popularly referred to as positive predictive parity in fairness literature. This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the Precision of model predictions within a specific subset is significantly lower than the model prediction Precision over the entire population. </p><p><b>Why it matters:</b> Having different precision (e.g. false discovery rates) between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. Unlike demographic parity, this test permits assuming different base label rates but flags differing mistake rates between different subgroups. Note that positive predictive parity does not necessarily indicate equal opportunity or predictive equality: as a hypothetical example, imagine that a loan qualification classifier flags 100 entries for group A and 100 entries for group B, each with a precision of 100%, but there are 100 actual qualified entries in group A and 9000 in group B. This would indicate disparities in opportunities given to each subgroup.</p><p><b>Configuration:</b> By default, Precision is computed over all predictions/labels. Note that we round predictions to 0/1 to compute precision.</p><p><b>Example:</b> Suppose we had data with 2 features: <span>[['cat', 0.2], ['dog', 0.3], ['cat', 0.5], ['dog', 0.7], ['cat', 0.7], ['dog', 0.2]]</span>, model predictions <span>[0.3, 0.51, 0.7, 0.49, 0.9, 0.58]</span>, and labels <span>[1, 0, 1, 0, 0, 1]</span>. Then, the Precision over the feature subset value 'cat' would be 0.5, compared to the overall metric of 0.5.</p>

### Subset Mean-Absolute Error (MAE)
<p>This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the MAE of model predictions within a specific subset is significantly higher than the model prediction MAE over the entire population. </p><p><b>Why it matters:</b> Having different mean-absolute error between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. </p><p><b>Configuration:</b> By default, mean-absolute error is computed over all predictions/labels. </p><p><b>Example:</b> Suppose we had data with 2 features: <span>[[0.4, 0.2], [0.5, 0.3], [0.7, 0.5], [0.6, 0.7], [0.8, 0.7]]</span>, model predictions <span>[0.3, 0.4, 0.8, 0.8, 0.9]</span>, and labels <span>[0.5, 0.5, 1.5, 1.5, 1.5]</span>. Then, the Mean-absolute error over the feature subset (0.0, 0.5] for the first feature would be 0.15, compared to the overall metric of 0.46.</p>

### Subset Mean-Absolute Percentage Error (MAPE)
<p>This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the MAPE of model predictions within a specific subset is significantly higher than the model prediction MAPE over the entire population. </p><p><b>Why it matters:</b> Having different mean-absolute percentage error between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. </p><p><b>Configuration:</b> By default, mean-absolute percentage error is computed over all predictions/labels. </p><p><b>Example:</b> Suppose we had data with 2 features: <span>[[0.4, 0.2], [0.5, 0.3], [0.7, 0.5], [0.6, 0.7], [0.8, 0.7]]</span>, model predictions <span>[0.3, 0.4, 0.8, 0.8, 0.9]</span>, and labels <span>[0.5, 0.5, 1.5, 1.5, 1.5]</span>. Then, the Mean-absolute percentage error over the feature subset (0.0, 0.5] for the first feature would be 0.15, compared to the overall metric of 0.46.</p>

### Subset Recall
<p>This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the Recall of model predictions within a specific subset is significantly lower than the model prediction Recall over the entire population. </p><p><b>Why it matters:</b> Having different Recall between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. </p><p><b>Configuration:</b> By default, Recall is computed over all predictions/labels. </p><p><b>Example:</b> Suppose in our subset the ground truth has the following: <span>[Microsoft Corp.] CEO [Steve Ballmer] announced the release of [Windows 7] today</span> Suppose your actual extraction has the following: <span>[Microsoft Corp.] [CEO] [Steve] Ballmer announced the release of Windows 7 [today]</span> This has 1 true positive (<span>[Microsoft Corp.]</span>), 2 false negatives (<span>[Steve Ballmer], [Windows 7]</span>), and 3 false positives (<span>[Steve], [CEO], [today]</span>). This leads to a Recall of 0.33 on this subset of data. We then compare that to the overall Recall on the full dataset.</p>

### Subset Prediction Variance (Positive Labels)
<p>The subset variance test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the variance of model predictions within a specific subset is significantly higher than model prediction variance of the entire population. In this test, the population refers to all data with positive ground-truth labels.</p><p><b>Why it matters:</b> High variance within a feature subset compared to the overall population could mean a few different things, and should be analyzed with other subset performance tests (accuracy, AUC) for a more clear view. In the variance metric over positive/negative labels, this could mean the model is much more uncertain about the given subset. When paired with a decrease in AUC, this implies the model underperforms on this subset.</p><p><b>Configuration:</b> By default, the variance is computed over all predictions with a positive ground-truth label.</p><p><b>Example:</b> Suppose we had data with 2 features: [['cat', 0.2], ['dog', 0.3], ['cat', 0.5], ['dog', 0.7], ['cat', 0.7], ['dog', 0.2]] and model predictions [0.3, 0.51, 0.7, 0.49, 0.9, 0.48]. Assume the labels are [1, 0, 1, 0, 0, 0].Then the prediction variance for feature column 1, subset 'cat' with positive labels would be 0.04.</p>

### Subset False Negative Rate


## Abnormal Inputs

### Numeric Outliers
<p>This test measures the number of failing rows in your data with outliers and their impact on the model. Outliers are values which may not necessarily be outside of an allowed range for a feature, but are extreme values that are unusual and may be indicative of abnormality. The model impact is the difference in model performance between passing and failing rows with outliers. If labels are not provided, prediction change is used instead of model performance change.</p><p><b>Why it matters:</b> Outliers can be a sign of corrupted or otherwise erroneous data, and can degrade model performance if used in the training data, or lead to unexpected behaviour if input at inference time.</p><p><b>Configuration:</b> By default this test is run over each numeric feature that is neither unique nor ascending.</p><p><b>Example:</b> Suppose there is a feature <span>age</span> for which in the reference set the values <span>103</span> and <span>114</span> each appear once but every other value (with substantial sample size) is contained within the range <span>[0, 97]</span>. Then we would infer a lower outlier threshold of <span>0</span> and an upper outlier threshold of <span>97</span>. This test raises a warning if we observe any values in the evaluation set outside these thresholds or if model performance decreases on observed datapoints with outliers.</p>

### Unseen Categorical
<p>This test measures the number of failing rows in your data with unseen categorical values and their impact on the model. The model impact is the difference in model performance between passing and failing rows with unseen categorical values. If labels are not provided, prediction change is used instead of model performance change.</p><p><b>Why it matters:</b> Unseen categorical values are a common failure point in machine learning systems; since these models are trained over a reference set, they may yield uninterpretable or undefined behavior when interacting with an unseen categorical value. In addition, such errors may expose gaps or errors in data collection.</p><p><b>Configuration:</b> By default, this test runs over all categorical features.</p><p><b>Example:</b> Say that the feature <span>Animal</span> contains the values <span>['Cat', 'Dog']</span> from the reference set. This test raises a warning if we observe any unseen values in the evaluation set such as <span>'Mouse'</span> that causes a significant change in model performance. If labels/predictions are provided in the run, then a severity would be raised if the Average Prediction changed by 0.03. If labels/predictions were not provided but <span>'Mouse'</span> appeared in 3% of the evaluation dataset, an severity would be raised due to the significant increase in presence of an unseen feature.</p>

### Rare Categories
<p>This test measures the severity of passing to the model data points whose features contain rarely observed categories (relative to the reference set). The severity is a function of the impact of these values on the model, as well as the presence of these values in the data. The model impact is the difference in model performance between passing and failing rows with rarely observed categorical values. If labels are not provided, prediction change is used instead of model performance change. The number of failing rows refers to the number of times rarely observed categorical values are observed in the evaluation set.</p><p><b>Why it matters:</b> Rare categories are a common failure point in machine learning systems because less data often means worse performance. In addition, this may expose gaps or errors in data collection.</p><p><b>Configuration:</b> By default, this test runs over all categorical features. A category is considered rare if it occurs fewer than <span>min_num_occurrences</span> times, or if it occurs less than <span>min_pct_occurrences</span> of the time. If neither of these values are specified, the rate of appearance below which a category is considered rare is <span>min_ratio_rel_uniform</span> divided by the number of classes.</p><p><b>Example:</b> Say that the feature <span>AgeGroup</span> takes on the value <span>0-18</span> twice while taking on the value <span>35-55</span> a total of <span>98</span> times. If the <span>min_num_occurences</span> is <span>5</span> and the <span>min_pct_occurrences</span> is <span>0.03</span> then the test will flag the value <span>0-18</span> as a rare category.</p>

### Out of Range
<p>This test measures the number of failing rows in your data with values outside the inferred range of allowed values and their impact on the model. The model impact is the difference in model performance between passing and failing rows with values outside the inferred range of allowed values. If labels are not provided, prediction change is used instead of model performance change.</p><p><b>Why it matters:</b> In production, the model may encounter corrupted or manipulated out of range values. It is important that the model is robust to such extremities.</p><p><b>Configuration:</b> By default, this test runs over all numeric features.</p><p><b>Example:</b> In the reference set, the <span>Age</span> feature has a range of <span>[0, 121]</span>. This test raises a warning if we observe values outside of this range in the evaluation set (eg. <span>150, 200</span>) or if model performance decreases on observed datapoints outside of this range.</p>

### Required Characters
<p>This test measures the number of failing rows in your data with strings without any required characters and their impact on the model. The model impact is the difference in model performance between passing and failing rows with strings without any required characters. If labels are not provided, prediction change is used instead of model performance change.</p><p><b>Why it matters:</b> A feature may require specific characters. However, errors in the data pipeline may allow invalid data points that lack these required characters to pass. Failing to catch such errors may lead to noisier training data or noisier predictions during inference, which can degrade model metrics.</p><p><b>Configuration:</b> By default, this test runs over all string features that are inferred to have required characters.</p><p><b>Example:</b> Say that the feature <span>email</span> requires the character <span>@</span>. This test raises a warning if we observe any values in the evaluation set where the character is missing.</p>

### Inconsistencies
<p>This test measures the severity of passing to the model data points whose values are inconsistent (as inferred from the reference set). The severity is a function of the impact of these values on the model, as well as the presence of these values in the data. The model impact is the difference in model performance between passing and failing rows with data containing inconsistent feature values. If labels are not provided, prediction change is used instead of model performance change. The number of failing rows refers to the number of times data containing inconsistent feature values are observed in the evaluation set.</p><p><b>Why it matters:</b> Inconsistent values might be the result of malicious actors manipulating the data or errors in the data pipeline. Thus, it is important to be aware of inconsistent values to identify sources of manipulations or errors.</p><p><b>Configuration:</b> By default, this test runs on pairs of categorical features whose correlations exceed some minimum threshold. The default threshold for the frequency ratio below which values are considered to be inconsistent is <span>0.02</span>.</p><p><b>Example:</b> Suppose we have a feature <span>country</span> that takes on value <span>"US"</span> with frequency <span>0.5</span>, and a feature <span>time_zone</span> that takes on value <span>"Central European Time"</span> with frequency <span>0.2</span>. Then if these values appear together with frequency less than <span>0.5 * 0.2 * 0.02 = 0.002 </span>, in the reference set, rows in which these values do appear together are inconsistencies.</p>

### Capitalization
<p>This test measures the number of failing rows in your data with different types of capitalization and their impact on the model. The model impact is the difference in model performance between passing and failing rows with different types of capitalization. If labels are not provided, prediction change is used instead of model performance change.</p><p><b>Why it matters:</b> In production, models can come across the same value with different capitalizations, making it important to explicitly check that your model is invariant to such differences.</p><p><b>Configuration:</b> By default, this test runs over all categorical features.</p><p><b>Example:</b> Suppose we had a column that corresponded to country code. For a specific row, let's say the observed value in the reference set was <span>USA</span>. This test raises a warning if we observe a similar value in the evaluation set with case changes, e.g. <span>uSa</span> or if model performance decreases on observed datapoints with case changes.</p>

### Empty String
<p>This test measures the number of failing rows in your data with empty string values instead of null values and their impact on the model. The model impact is the difference in model performance between passing and failing rows with empty string values instead of null values. If labels are not provided, prediction change is used instead of model performance change.</p><p><b>Why it matters:</b> In production, the model may encounter corrupted or manipulated string values. Null values and empty strings are often expected to be treated the same, but the model might not treat them that way. It is important that the model is robust to such extremities.</p><p><b>Configuration:</b> By default, this test runs over all string features with null values.</p><p><b>Example:</b> In the reference set, the <span>Name</span> feature contains nulls. This test raises a warning if we observe any empty string in the <span>Name</span> feature or if these values decrease model performance.</p>

### Embedding Anomalies
<p>This test measures the number of failing rows in your data with anomalous embeddings and their impact on the model. The model impact is the difference in model performance between passing and failing rows with anomalous embeddings. If labels are not provided, prediction change is used instead of model performance change.</p><p><b>Why it matters:</b> In production, the presence of anomalous embeddings can indicate breaks in upstream data pipelines, poor model generalization, or other issues.</p><p><b>Configuration:</b> By default, this test runs over all configured embeddings.</p><p><b>Example:</b> Say that the 'user_id' embedding is two-dimensional and has a mean at the origin and a covariance matrix of [[1, 0], [0, 1]] in the reference set. This test will flag any embeddings in the test set that are distant from the reference distribution using the Mahalanobis distance.</p>

### Null Check
<p>This test measures the number of failing rows in your data with nulls in features that should not have nulls and their impact on the model. The model impact is the difference in model performance between passing and failing rows with nulls in features that should not have nulls. If labels are not provided, prediction change is used instead of model performance change.</p><p><b>Why it matters:</b> The model may make certain assumptions about a column depending on whether or not it had nulls in the training data. If these assumptions break during production, this may damage the model's performance. For example, if a column was never null during training then a model may not have learned to be robust against noise in that column. </p><p><b>Configuration:</b> By default, this test runs over all columns that had zero nulls in the reference set. </p><p><b>Example:</b> Suppose that the feature <span>Age</span> was never null in the reference set. This test raises a warning if <span>Age</span> was null <span>10%</span> of the time in the evaluation set or if model performance decreases on observed datapoints with nulls </p>

### Feature Type Check
<p>This test checks for feature values of the incorrect type. The test severity is a function of both the presence of values of the incorrect type and the observed effect of these values on model performance.</p><p><b>Why it matters:</b> A feature may require a specific type. However, errors in the data pipeline may produce values that are outside the expected type. Failing to catch such errors may lead to errors or undefined behavior from the model.</p><p><b>Configuration:</b> By default, this test runs over all features.</p><p><b>Example:</b> Say that the feature <span>Cost</span> requires the float type. This test raises a warning if we observe any values where <span>Cost</span> is represented as a different type instead.</p>

## Subset Performance Degradation

### Subset Drift Macro F1
<p>F1 is a holistic measure of both precision and recall. When transitioning to the multiclass setting we can use macro F1 which computes the F1 of each class and averages them. This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the macro F1 of model predictions within a specific subset is significantly lower than the model prediction macro F1 over the entire population. </p><p><b>Why it matters:</b> Having different macro F1 between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. </p><p><b>Configuration:</b> By default, macro F1 is computed over all predictions/labels. Note that the predicted label is the label with the largest predicted probability.</p><p><b>Example:</b> Suppose we are differentiating between cats, bears, and dogs. Assume that across the data points where <span>height=2</span> the predictions are <span>[0.9, 0.1, 0], [0.1, 0.9, 0], [0.2, 0.1, 0.7]</span> and the labels are <span>[1, 0, 0], [1, 0, 0], [0, 0, 1]</span> (where the first index corresponds to cat, the second corresponds to bear, and the third corresponds to dog). Then the macro F1 across this subset is <span>0.78</span>. If the overall macro F1 across all subsets is <span>0.9</span> then this test raises a warning.</p>

### Subset Drift Root-Mean-Squared Error (RMSE)
<p>This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the RMSE of model predictions within a specific subset is significantly higher than the model prediction RMSE over the entire population. </p><p><b>Why it matters:</b> Having different RMSE between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. </p><p><b>Configuration:</b> By default, RMSE is computed over all predictions/labels. </p><p><b>Example:</b> Suppose we had data with 2 features: <span>[[0.4, 0.2], [0.5, 0.3], [0.7, 0.5], [0.6, 0.7], [0.8, 0.7]]</span>, model predictions <span>[0.3, 0.4, 0.8, 0.8, 0.9]</span>, and labels <span>[0.5, 0.5, 1.5, 1.5, 1.5]</span>. Then, the RMSE over the feature subset (0.0, 0.5] for the first feature would be 0.158, compared to the overall metric of 0.527.</p>

### Subset Drift Prediction Variance


### Subset Drift Multiclass Accuracy
<p>This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the accuracy of model predictions within a specific subset is significantly lower than the model prediction accuracy over the entire population. </p><p><b>Why it matters:</b> Having different accuracy between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. Accuracy can be thought of as a 'weaker' metric of model bias compared to measuring false positive rate (predictive equality) or false negative rate (equal opportunity). This is because we can have similar accuracy between group A and group B; yet group A actually has higher false positive rate, while group B has higher false negative rate (e.g. we reject qualified applicants in group A but accept non-qualified applicants in group B). Nevertheless, accuracy is a standard metric used during evaluation and should be considered as part of performance bias testing.</p><p><b>Configuration:</b> By default, accuracy is computed over all predictions/labels. Note we round predictions to 0/1 to compute accuracy.</p><p><b>Example:</b> Suppose we had data with 2 features: <span>[['cat', 0.2], ['dog', 0.3], ['cat', 0.5], ['dog', 0.7], ['cat', 0.7], ['dog', 0.2]]</span>, model predictions <span>[0.3, 0.51, 0.7, 0.49, 0.9, 0.58]</span>, and labels <span>[1, 0, 1, 0, 0, 1]</span>. Then, the accuracy over the feature subset value 'cat' would be 0.33, compared to the overall metric of 0.5.</p>

### Subset Drift F1
<p>This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the F1 of model predictions within a specific subset is significantly lower than the model prediction F1 over the entire population. </p><p><b>Why it matters:</b> Having different F1 between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. </p><p><b>Configuration:</b> By default, F1 is computed over all predictions/labels. Note that we round predictions to 0/1 to compute F1 score.</p><p><b>Example:</b> Suppose we had data with 2 features: <span>[['cat', 0.2], ['dog', 0.3], ['cat', 0.5], ['dog', 0.7], ['cat', 0.7], ['dog', 0.2]]</span>, model predictions <span>[0.3, 0.51, 0.7, 0.49, 0.9, 0.58]</span>, and labels <span>[1, 0, 1, 0, 0, 1]</span>. Then, the F1 over the feature subset value 'cat' would be 0.5, compared to the overall metric of 0.57.</p>

### Subset Drift Prediction Variance (Negative Labels)
<p>The subset variance test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the variance of model predictions within a specific subset is significantly higher than model prediction variance of the entire population. In this test, the population refers to all data with negative ground-truth labels.</p><p><b>Why it matters:</b> High variance within a feature subset compared to the overall population could mean a few different things, and should be analyzed with other subset performance tests (accuracy, AUC) for a more clear view. In the variance metric over positive/negative labels, this could mean the model is much more uncertain about the given subset. When paired with a decrease in AUC, this implies the model underperforms on this subset.</p><p><b>Configuration:</b> By default, the variance is computed over all predictions with a negative ground-truth label.</p><p><b>Example:</b> Suppose we had data with 2 features: [['cat', 0.2], ['dog', 0.3], ['cat', 0.5], ['dog', 0.7], ['cat', 0.7], ['dog', 0.2]] and model predictions [0.3, 0.51, 0.7, 0.49, 0.9, 0.48]. Assume the labels are [1, 0, 1, 0, 0, 0].Then the prediction variance for feature column 1, subset 'cat' with negative labels would be 0.</p>

### Subset Drift Macro Recall
<p>The recall test is more popularly referred to as equal opportunity or false negative error rate balance in fairness literature. When transitioning to the multiclass setting we can use macro recall which computes the recall of each individual class and then averages these numbers.This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the Macro Recall of model predictions within a specific subset is significantly lower than the model prediction Macro Recall over the entire population. </p><p><b>Why it matters:</b> Having different true positive rates (e.g. equal opportunity) between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. Unlike demographic parity, this test permits assuming different base label rates but flags differing mistake rates between different subgroups. An intuitive example is when the label indicates a positive attribute: if predicting whether to interview a given candidate, make sure that out of qualified candidates, the rate at which the model predicts an interview is similar to group A and B. </p><p><b>Configuration:</b> By default, Macro Recall is computed over all predictions/labels. Note that the predicted label is the label with the largest predicted class probability.</p><p><b>Example:</b> Suppose we are differentiating between cats, bears, and dogs. Assume that across the data points where <span>height=2</span> the predictions are <span>[0.9, 0.1, 0], [0.1, 0.9, 0], [0.2, 0.1, 0.7]</span> and the labels are <span>[1, 0, 0], [1, 0, 0], [0, 0, 1]</span> (where the first index corresponds to cat, the second corresponds to bear, and the third corresponds to dog). Then the Macro Recall across this subset is <span>0.67</span>. If the overall Macro Recall across all subsets is <span>0.9</span> then this test raises a warning.</p>

### Subset Drift False Positive Rate
<p>The false positive error rate test is also popularly referred to as as predictive equality, or equal mis-opportunity in fairness literature. This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the false positive rate of model predictions within a specific subset is significantly higher than the model prediction false positive rate over the entire population. </p><p><b>Why it matters:</b> Having different false positive rates (e.g. predictive equality) between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. Unlike demographic parity, this test permits assuming different base label rates but flags differing mistake rates between different subgroups. As an intuitive example, consider the case when the label indicates an undesirable attribute: if predicting whether a person will default on their loan, make sure that for people who didn't default, the rate at which the model incorrectly predicts positive is similar for group A and B. </p><p><b>Configuration:</b> By default, false positive rate is computed over all predictions/labels. Note that we round predictions to 0/1 to compute false positive rate.</p><p><b>Example:</b> Suppose we had data with 2 features: <span>[['cat', 0.2], ['dog', 0.3], ['cat', 0.5], ['dog', 0.7], ['cat', 0.7], ['dog', 0.2]]</span>, model predictions <span>[0.3, 0.51, 0.7, 0.49, 0.9, 0.58]</span>, and labels <span>[1, 0, 1, 0, 0, 1]</span>. Then, the false positive rate over the feature subset value 'cat' would be 1.0, compared to the overall metric of 0.67.</p>

### Subset Drift F1
<p>This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the F1 of model predictions within a specific subset is significantly lower than the model prediction F1 over the entire population. </p><p><b>Why it matters:</b> Having different F1 between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. </p><p><b>Configuration:</b> By default, F1 is computed over all predictions/labels. </p><p><b>Example:</b> Suppose in our subset the ground truth has the following: <span>[Microsoft Corp.] CEO [Steve Ballmer] announced the release of [Windows 7] today</span> Suppose your actual extraction has the following: <span>[Microsoft Corp.] [CEO] [Steve] Ballmer announced the release of Windows 7 [today]</span> This has 1 true positive (<span>[Microsoft Corp.]</span>), 2 false negatives (<span>[Steve Ballmer], [Windows 7]</span>), and 3 false positives (<span>[Steve], [CEO], [today]</span>). This leads to a F1 of 0.25 on this subset of data. We then compare that to the overall F1 on the full dataset.</p>

### Subset Drift Accuracy
<p>This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the accuracy of model predictions within a specific subset is significantly lower than the model prediction accuracy over the entire population. </p><p><b>Why it matters:</b> Having different accuracy between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. Accuracy can be thought of as a 'weaker' metric of model bias compared to measuring false positive rate (predictive equality) or false negative rate (equal opportunity). This is because we can have similar accuracy between group A and group B; yet group A actually has higher false positive rate, while group B has higher false negative rate (e.g. we reject qualified applicants in group A but accept non-qualified applicants in group B). Nevertheless, accuracy is a standard metric used during evaluation and should be considered as part of performance bias testing.</p><p><b>Configuration:</b> By default, accuracy is computed over all predictions/labels. Note we round predictions to 0/1 to compute accuracy.</p><p><b>Example:</b> Suppose we had data with 2 features: <span>[['cat', 0.2], ['dog', 0.3], ['cat', 0.5], ['dog', 0.7], ['cat', 0.7], ['dog', 0.2]]</span>, model predictions <span>[0.3, 0.51, 0.7, 0.49, 0.9, 0.58]</span>, and labels <span>[1, 0, 1, 0, 0, 1]</span>. Then, the accuracy over the feature subset value 'cat' would be 0.33, compared to the overall metric of 0.5.</p>

### Subset Drift Precision
<p>This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the Precision of model predictions within a specific subset is significantly lower than the model prediction Precision over the entire population. </p><p><b>Why it matters:</b> Having different Precision between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. </p><p><b>Configuration:</b> By default, Precision is computed over all predictions/labels. </p><p><b>Example:</b> Suppose in our subset the ground truth has the following: <span>[Microsoft Corp.] CEO [Steve Ballmer] announced the release of [Windows 7] today</span> Suppose your actual extraction has the following: <span>[Microsoft Corp.] [CEO] [Steve] Ballmer announced the release of Windows 7 [today]</span> This has 1 true positive (<span>[Microsoft Corp.]</span>), 2 false negatives (<span>[Steve Ballmer], [Windows 7]</span>), and 3 false positives (<span>[Steve], [CEO], [today]</span>). This leads to a Precision of 0.25 on this subset of data. We then compare that to the overall Precision on the full dataset.</p>

### Subset Drift F1
<p>This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the F1 of model predictions within a specific subset is significantly lower than the model prediction F1 over the entire population. </p><p><b>Why it matters:</b> Having different F1 between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. </p><p><b>Configuration:</b> By default, F1 is computed over all predictions/labels. </p><p><b>Example:</b> Suppose in our subset the ground truth has two cats and one dog in the image. Suppose your actual detection has two true positives (the cats), one false positive (it predicts a bird) and one false negative (does not predict the dog). This leads to a F1 of 0.66 on this subset of data. We then compare that to the overall F1 on the full dataset.</p>

### Subset Drift Macro Precision
<p>The precision test is also popularly referred to as positive predictive parity in fairness literature. When transitioning to the multiclass setting, we can compute macro precision which computes the precisions of each class individually and then averages them.This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the Macro Precision of model predictions within a specific subset is significantly lower than the model prediction Macro Precision over the entire population. </p><p><b>Why it matters:</b> Having different macro precision (e.g. false discovery rates) between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. Unlike demographic parity, this test permits assuming different base label rates but flags differing mistake rates between different subgroups. Note that positive predictive parity does not necessarily indicate equal opportunity or predictive equality: as a hypothetical example, imagine that a loan qualification classifier flags 100 entries for group A and 100 entries for group B, each with a precision of 100%, but there are 100 actual qualified entries in group A and 9000 in group B. This would indicate disparities in opportunities given to each subgroup.</p><p><b>Configuration:</b> By default, Macro Precision is computed over all predictions/labels. Note that the predicted label is the label with the greatest predicted probability.</p><p><b>Example:</b> Suppose we are differentiating between cats, bears, and dogs. Assume that across the data points where <span>height=2</span> the predictions are <span>[0.9, 0.1, 0], [0.1, 0.9, 0], [0.2, 0.1, 0.7]</span> and the labels are <span>[1, 0, 0], [1, 0, 0], [0, 0, 1]</span> (where the first index corresponds to cat, the second corresponds to bear, and the third corresponds to dog). Then the Macro Precision across this subset is <span>0.67</span>. If the overall Macro Precision across all subsets is <span>0.9</span> then this test raises a warning.</p>

### Subset Drift Precision
<p>This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the Precision of model predictions within a specific subset is significantly lower than the model prediction Precision over the entire population. </p><p><b>Why it matters:</b> Having different Precision between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. </p><p><b>Configuration:</b> By default, Precision is computed over all predictions/labels. </p><p><b>Example:</b> Suppose in our subset the ground truth has two cats and one dog in the image. Suppose your actual detection has two true positives (the cats), one false positive (it predicts a bird) and one false negative (does not predict the dog). This leads to a Precision of 0.66 on this subset of data. We then compare that to the overall Precision on the full dataset.</p>

### Subset Drift Mean Reciprocal Rank (MRR)
<p>This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the MRR of model predictions within a specific subset is significantly lower than the model prediction MRR over the entire population. </p><p><b>Why it matters:</b> Having different MRR between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. </p><p><b>Configuration:</b> By default, MRR is computed over all predictions/labels. </p><p><b>Example:</b> Suppose we had the following query-document pairs: <span>[[(qid: 1), 'A'], [(qid: 1), 'A'], [(qid: 2), 'B'], [(qid: 2), 'B']]</span>, model predictions <span>[2, 1, 1, 2]</span>, and true relevance ranks <span>[1,2,1,2]</span>. Then, the MRR over the feature subset 'A' would be 0.5, compared to the overall metric of 0.75.</p>

### Subset Drift Mean-Squared-Log Error (MSLE)


### Subset Drift Multiclass AUC
<p>In the multiclass setting, we compute one vs. one area under the curve (AUC), which computes the AUC between every pairwise combination of classes. This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the Area Under Curve (AUC) of model predictions within a specific subset is significantly lower than the model prediction Area Under Curve (AUC) over the entire population. </p><p><b>Why it matters:</b> Having different AUC between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. </p><p><b>Configuration:</b> By default, AUC is computed over all predictions/labels. Note that we compute AUC of the Receiver Operating Characteristic (ROC) curve.</p><p><b>Example:</b> Suppose we are differentiating between cats, bears, and dogs. Assume that across the data points where <span>height=2</span> the predictions are <span>[0.9, 0.1, 0], [0.1, 0.9, 0], [0.2, 0.1, 0.7]</span> and the labels are <span>[1, 0, 0], [1, 0, 0], [0, 0, 1]</span> (where the first index corresponds to cat, the second corresponds to bear, and the third corresponds to dog). Then the AUC (one vs. one) across this subset is <span>0.75</span>. If the overall AUC (one vs. one) across all subsets is <span>0.9</span> then this test raises a warning.</p>

### Subset Drift Mean-Squared Error (MSE)


### Subset Drift Average Number of Predicted Entities


### Subset Drift AUC
<p>This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the Area Under Curve (AUC) of model predictions within a specific subset is significantly lower than the model prediction Area Under Curve (AUC) over the entire population. </p><p><b>Why it matters:</b> Having different AUC between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. </p><p><b>Configuration:</b> By default, AUC is computed over all predictions/labels. Note that we compute AUC of the Receiver Operating Characteristic (ROC) curve.</p><p><b>Example:</b> Suppose we had data with 2 features: <span>[['cat', 0.2], ['dog', 0.3], ['cat', 0.5], ['dog', 0.7], ['cat', 0.7], ['dog', 0.2]]</span>, model predictions <span>[0.3, 0.51, 0.7, 0.49, 0.9, 0.58]</span>, and labels <span>[1, 0, 1, 0, 0, 1]</span>. Then, the AUC over the feature subset value 'cat' would be 0.0, compared to the overall metric of 0.44.</p>

### Subset Drift Rank Correlation
<p>This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the rank correlation of model predictions within a specific subset is significantly lower than the model prediction rank correlation over the entire population. </p><p><b>Why it matters:</b> Having different rank correlation between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. </p><p><b>Configuration:</b> By default, rank correlation is computed over all predictions/labels. </p><p><b>Example:</b> Suppose we had the following query-document pairs: <span>[[(qid: 1), 'A'], [(qid: 1), 'A'], [(qid: 2), 'B'], [(qid: 2), 'B']]</span>, model predictions <span>[2, 1, 1, 2]</span>, and true relevance ranks <span>[1,2,1,2]</span>. Then, the rank correlation over the feature subset 'A' would be -1, compared to the overall metric of 0.</p>

### Subset Drift Recall
<p>This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the Recall of model predictions within a specific subset is significantly lower than the model prediction Recall over the entire population. </p><p><b>Why it matters:</b> Having different Recall between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. </p><p><b>Configuration:</b> By default, Recall is computed over all predictions/labels. </p><p><b>Example:</b> Suppose in our subset the ground truth has two cats and one dog in the image. Suppose your actual detection has two true positives (the cats), one false positive (it predicts a bird) and one false negative (does not predict the dog). This leads to a Recall of 0.66 on this subset of data. We then compare that to the overall Recall on the full dataset.</p>

### Subset Drift Recall
<p>The recall test is more popularly referred to as equal opportunity or false negative error rate balance in fairness literature. This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the Recall of model predictions within a specific subset is significantly lower than the model prediction Recall over the entire population. </p><p><b>Why it matters:</b> Having different true positive rates (e.g. equal opportunity) between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. Unlike demographic parity, this test permits assuming different base label rates but flags differing mistake rates between different subgroups. An intuitive example is when the label indicates a positive attribute: if predicting whether to interview a given candidate, make sure that out of qualified candidates, the rate at which the model predicts a rejection is similar to group A and B. </p><p><b>Configuration:</b> By default, Recall is computed over all predictions/labels. Note that we round predictions to 0/1 to compute recall.</p><p><b>Example:</b> Suppose we had data with 2 features: <span>[['cat', 0.2], ['dog', 0.3], ['cat', 0.5], ['dog', 0.7], ['cat', 0.7], ['dog', 0.2]]</span>, model predictions <span>[0.3, 0.51, 0.7, 0.49, 0.9, 0.58]</span>, and labels <span>[1, 0, 1, 0, 0, 1]</span>. Then, the Recall over the feature subset value 'cat' would be 0.5, compared to the overall metric of 0.66.</p>

### Subset Drift NDCG
<p>This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the NDCG of model predictions within a specific subset is significantly lower than the model prediction NDCG over the entire population. </p><p><b>Why it matters:</b> Having different NDCG between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. </p><p><b>Configuration:</b> By default, NDCG is computed over all predictions/labels. </p><p><b>Example:</b> Suppose we had the following query-document pairs: <span>[[(qid: 1), 'A'], [(qid: 1), 'A'], [(qid: 2), 'B'], [(qid: 2), 'B']]</span>, model predictions <span>[2, 1, 1, 2]</span>, and true relevance ranks <span>[1,2,1,2]</span>. Then, the NDCG over the feature subset 'A' would be 0.86, compared to the overall metric of 0.93.</p>

### Subset Drift Average Rank


### Subset Drift Precision
<p>The precision test is also popularly referred to as positive predictive parity in fairness literature. This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the Precision of model predictions within a specific subset is significantly lower than the model prediction Precision over the entire population. </p><p><b>Why it matters:</b> Having different precision (e.g. false discovery rates) between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. Unlike demographic parity, this test permits assuming different base label rates but flags differing mistake rates between different subgroups. Note that positive predictive parity does not necessarily indicate equal opportunity or predictive equality: as a hypothetical example, imagine that a loan qualification classifier flags 100 entries for group A and 100 entries for group B, each with a precision of 100%, but there are 100 actual qualified entries in group A and 9000 in group B. This would indicate disparities in opportunities given to each subgroup.</p><p><b>Configuration:</b> By default, Precision is computed over all predictions/labels. Note that we round predictions to 0/1 to compute precision.</p><p><b>Example:</b> Suppose we had data with 2 features: <span>[['cat', 0.2], ['dog', 0.3], ['cat', 0.5], ['dog', 0.7], ['cat', 0.7], ['dog', 0.2]]</span>, model predictions <span>[0.3, 0.51, 0.7, 0.49, 0.9, 0.58]</span>, and labels <span>[1, 0, 1, 0, 0, 1]</span>. Then, the Precision over the feature subset value 'cat' would be 0.5, compared to the overall metric of 0.5.</p>

### Subset Drift Mean-Absolute Error (MAE)
<p>This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the MAE of model predictions within a specific subset is significantly higher than the model prediction MAE over the entire population. </p><p><b>Why it matters:</b> Having different mean-absolute error between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. </p><p><b>Configuration:</b> By default, mean-absolute error is computed over all predictions/labels. </p><p><b>Example:</b> Suppose we had data with 2 features: <span>[[0.4, 0.2], [0.5, 0.3], [0.7, 0.5], [0.6, 0.7], [0.8, 0.7]]</span>, model predictions <span>[0.3, 0.4, 0.8, 0.8, 0.9]</span>, and labels <span>[0.5, 0.5, 1.5, 1.5, 1.5]</span>. Then, the Mean-absolute error over the feature subset (0.0, 0.5] for the first feature would be 0.15, compared to the overall metric of 0.46.</p>

### Subset Drift Mean-Absolute Percentage Error (MAPE)
<p>This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the MAPE of model predictions within a specific subset is significantly higher than the model prediction MAPE over the entire population. </p><p><b>Why it matters:</b> Having different mean-absolute percentage error between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. </p><p><b>Configuration:</b> By default, mean-absolute percentage error is computed over all predictions/labels. </p><p><b>Example:</b> Suppose we had data with 2 features: <span>[[0.4, 0.2], [0.5, 0.3], [0.7, 0.5], [0.6, 0.7], [0.8, 0.7]]</span>, model predictions <span>[0.3, 0.4, 0.8, 0.8, 0.9]</span>, and labels <span>[0.5, 0.5, 1.5, 1.5, 1.5]</span>. Then, the Mean-absolute percentage error over the feature subset (0.0, 0.5] for the first feature would be 0.15, compared to the overall metric of 0.46.</p>

### Subset Drift Average Prediction
<p>This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the average prediction of model predictions within a specific subset is significantly different than the model prediction average prediction over the entire population. </p><p><b>Why it matters:</b> Having different average prediction between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. </p><p><b>Configuration:</b> By default, average prediction is computed over all predictions/labels. </p><p><b>Example:</b> Suppose we had data with 2 features: <span>[[0.4, 0.2], [0.5, 0.3], [0.7, 0.5], [0.6, 0.7], [0.8, 0.7]]</span>, model predictions <span>[0.3, 0.4, 0.8, 0.8, 0.9]</span>, and labels <span>[0.5, 0.5, 1.5, 1.5, 1.5]</span>. Then, the average prediction over the feature subset (0.0, 0.5] for the first feature would be 0.35, compared to the overall metric of 0.83.</p>

### Subset Drift Recall
<p>This test checks whether the model performs equally well across a given subset of rows as it does across the whole dataset. The key detail displays the performance difference between the lowest performing subset and the overall population. The test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the Recall of model predictions within a specific subset is significantly lower than the model prediction Recall over the entire population. </p><p><b>Why it matters:</b> Having different Recall between different subgroups is an important indicator of performance bias; in general, bias is an important phenomenon in machine learning and not only contains implications for fairness and ethics, but also indicates failures in adequate feature representation and spurious correlation. </p><p><b>Configuration:</b> By default, Recall is computed over all predictions/labels. </p><p><b>Example:</b> Suppose in our subset the ground truth has the following: <span>[Microsoft Corp.] CEO [Steve Ballmer] announced the release of [Windows 7] today</span> Suppose your actual extraction has the following: <span>[Microsoft Corp.] [CEO] [Steve] Ballmer announced the release of Windows 7 [today]</span> This has 1 true positive (<span>[Microsoft Corp.]</span>), 2 false negatives (<span>[Steve Ballmer], [Windows 7]</span>), and 3 false positives (<span>[Steve], [CEO], [today]</span>). This leads to a Recall of 0.33 on this subset of data. We then compare that to the overall Recall on the full dataset.</p>

### Subset Drift Average Number of Predicted Boxes


### Subset Drift Prediction Variance (Positive Labels)
<p>The subset variance test first splits the dataset into various subsets depending on the quantiles of a given feature column. If the feature is categorical, the data is split based on the feature values. We then test whether the variance of model predictions within a specific subset is significantly higher than model prediction variance of the entire population. In this test, the population refers to all data with positive ground-truth labels.</p><p><b>Why it matters:</b> High variance within a feature subset compared to the overall population could mean a few different things, and should be analyzed with other subset performance tests (accuracy, AUC) for a more clear view. In the variance metric over positive/negative labels, this could mean the model is much more uncertain about the given subset. When paired with a decrease in AUC, this implies the model underperforms on this subset.</p><p><b>Configuration:</b> By default, the variance is computed over all predictions with a positive ground-truth label.</p><p><b>Example:</b> Suppose we had data with 2 features: [['cat', 0.2], ['dog', 0.3], ['cat', 0.5], ['dog', 0.7], ['cat', 0.7], ['dog', 0.2]] and model predictions [0.3, 0.51, 0.7, 0.49, 0.9, 0.48]. Assume the labels are [1, 0, 1, 0, 0, 0].Then the prediction variance for feature column 1, subset 'cat' with positive labels would be 0.04.</p>

### Subset Drift False Negative Rate


## Data Poisoning Detection

### Label Flipping Detection (Exact Match)
<p>This test detects corrupted data points in the evaluation dataset. It does this by checking for data points in the evaluation set that are also present in the reference set, but with a different label. This test assumes that the reference set is clean, trusted data and the evaluation set is potentially corrupted.</p><p><b>Why it matters:</b> Malicious actors can tamper with data pipelines by sending mislabeled data points to undermine the trustworthiness of your model and cause it to produce incorrect or harmful output. Detecting poisoning attacks before they affect your model is critical to ensuring model security.</p><p><b>Configuration:</b> By default, this test runs when the "Data Poisoning Detection" test category is selected.</p><p><b>Example:</b> Suppose there was an identical data point in both datasets, with label <span>0</span> in the reference set and label <span>1</span> in the evaluation set. This test would flag the sample in the evaluation set as being corrupted.</p>

### Label Flipping Detection (Near Match)
<p>This test detects corrupted data points in the evaluation dataset. It does this by checking for data points in the evaluation set that appear to be mislabeled based on their relative distances to each class in the reference set. This test assumes that the reference set is clean, trusted data and the evaluation set is potentially corrupted.</p><p><b>Why it matters:</b> Malicious actors can tamper with data pipelines by sending mislabeled data points to undermine the trustworthiness of your model and cause it to produce incorrect or harmful output. Detecting poisoning attacks before they affect your model is critical to ensuring model security.</p><p><b>Configuration:</b> By default, this test runs when the "Data Poisoning Detection" test category is selected.</p><p><b>Example:</b> Suppose that in the reference set, the minimum distance of any point with label <span>0</span> to a point from any other class is 0.5. Further suppose that in the evaluation set, a point with label <span>1</span> has distance 0.1 to a point from class <span>0</span> in the reference set. This test would flag the sample in the evaluation set as being corrupted.</p>

## Evasion Attack Detection

### Stateful Black Box Evasion Detection
<p>This test examines query patterns in the evaluation set to identify behavior indicative of an attempt to generate an adversarial example. It does this by flagging points for which the average distance to its k-nearest neighbors among a fixed number of preceding queries is below a threshold configured from the reference set. Often when only black box access to the model is available, the process of generating an adversarial example will involve querying the model on several similar data points in a short time period.</p><p><b>Why it matters:</b> Malicious actors can perturb inputs to alter model behavior in unexpected ways. It is important to be able to identify data coming from an adversarial attack.</p><p><b>Configuration:</b> This test requires timestamps to be specified in the evaluation set.</p><p><b>Example:</b> Suppose that for a point in the evaluation set, the average distance to its k-nearest neighbors in time window immediately preceding it is <span>5.0</span>, and the threshold determined from the reference set is <span>10.0</span>. This test would flag that point as being part of an adversarial attack.</p>

