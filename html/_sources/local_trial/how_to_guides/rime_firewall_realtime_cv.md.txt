# Protecting Your Model with AI Firewall

This guide will cover how to configure the AI Firewall in the realtime use-case for CV tasks.

AI Firewall Realtime detects bad incoming model inputs in near-real time. Similar to the AI Firewall Continuous Tests, AI Firewall Realtime is automatically trained from an AI Stress Testing run and can be used to wrap your model and protect it from "bad" incoming data.


In this walkthrough, we will be using the <a target="_blank" rel="noopener" href="https://cvml.ist.ac.at/AwA2/">Image Classification</a> dataset.

## Overview

AI Firewall Realtime can be easily setup via instantiation from an existing AI Stress Testing Run. You can also view a "simulation" of real-time events by running [AI Firewall Continuous Tests](rime_ai_firewall_continuous_tests_cv.md) over CV data.

{{ fw_realtime_overview }}

## 1. Run AI Stress Testing

The first step in setting up AI Firewall Realtime is running AI Stress Testing, and  configuring an AI Firewall for a given project. These steps are very similar to steps 1-3 of the [AI Firewall Continuous Tests tutorial](rime_ai_firewall_continuous_tests_cv.md).
```
rime-engine run-images --config-path images_examples/classification/awa2/stress_test_config.json
```

Next, click on "Configure AI Firewall" and fill out the details. The step is the same as step 3 in the Firewall Continuous Tests tutorial.
This step sets up an AI Firewall so that you can either use it in the Continuous Tests or Realtime setting.
<img src="../../_static/ui/FirewallConfig0_image.png" />

<br />

<img src="../../_static/ui/FirewallConfig_image.png" />

## 2. Review auto-configured AI Firewall Rules and Download

{{ fw_rules_review }}

<img src="../../_static/ui/FirewallConfig_Rules_image.png" />


Download the configuration file and place it in your `rime_trial` folder.


#### Copy example code and firewall endpoint and paste it in your inference code

{{ fw_code_example }}

## 3. Setup a Firewall Realtime Client in a Jupyter Notebook

{{ fw_notebook_setup }}

### Initialization

Let's import some code to the notebook. Remember to make sure
that you create the notebook in your `rime_trial` folder!

```python
import numpy as np
import os
import json

RIME_PATH = os.path.abspath('.')

```

Now we are ready to initialize/run the Firewall in a real-time setting!

### Running the AI Firewall Realtime with sample datapoints

Let's first import the Firewall Realtime package:

```python
from rime.images.firewall.base import ImageFirewall
from rime.tabular.firewall.uploader import FirewallUploader
from rime.core.client.firewall_client import FirewallClient
from rime.images.schema.task import Task
```

Let's then instantiate a firewall object:

```python

firewall_id = "$YOUR_FIREWALL_ID"
firewall_url = "$YOUR_FIREWALL_ENDPOINT"
upload_client = FirewallUploader.from_url(
    firewall_id,
    firewall_url,
)
fw_client = FirewallClient.from_cli_args(firewall_url)
firewall = ImageFirewall.from_components(
    firewall_id,
    "image_rules.json",
    task=Task.CLASSIFICATION,
    upload_client=upload_client,
    firewall_client=fw_client
)

```

Replace `$YOUR_FIREWALL_ID` with the Firewall ID from the configuration page.


## 4. Monitor events

Finally, let's try to pass in a sample datapoint! Let's get that from the
provided data (we assume that we are in the `rime_trial` directory):

```python
test_data_path = 'images_examples/classification/awa2/data/test_inputs_trial.json'
test_data = json.load(open(test_data_path, 'r'))
test_datapoint = test_data[127].copy()
```

The firewall surfaces a graph of "flagged" events. Datapoints that do not raise errors will not be logged in the UI.
This specific datapoint contains an image example that is unusually bright.
Now let's run the firewall over this datapoint.

```python
probs = np.array(test_datapoint["probabilities"])
firewall_response = firewall.validate_single_and_upload(test_datapoint, pred=probs)
```

If you take a look at `firewall_response.summary.action` you'll find that the Firewall has `flagged` the datapoint.

Once you have deployed your firewall, and input data are starting to roll in,
the AI Firewall will evaluate each and every data point, and output a decision:
`flag`, `pass`, `impute`, or `block` based on the rules criteria.

NOTE: Only non-passing datapoints will be shown in the UI. That way, you are only alerted on problematic datapoints.

### Troubleshooting
{{ troubleshooting_python_package_redirect }}
