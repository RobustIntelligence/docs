# Tabular Custom Abnormal Inputs Test

{{ custom_tests_intro }}

This Python file must expose a class named ``CustomAbnormalInputsBatchRunner`` that 
inherits from the ``AbstractCustomAbnormalInputsBatchRunner`` interface specified by 
RIME.

Implement the following methods in the ``CustomAbnormalInputsBatchRunner`` class.

* `batch_test_name`: A unique property for each test. Non-unique tests cause errors.
* `abnormal_inputs_criteria`: Takes reference and evaluation dataframes and returns a
    `pd.Series` object with a Boolean values for each row in the evaluation set. 
    The Boolean specifies whether the input is normal. The implementation can also take 
    additional arguments through the `params` dictionary in the configuration.

```python
"""Simple custom abnormal inputs test example."""
import numpy as np
import pandas as pd

from rime.tabular.data_tests.custom.abnormal_inputs import (
    AbstractCustomAbnormalInputsBatchRunner,
)


class CustomAbnormalInputsBatchRunner(AbstractCustomAbnormalInputsBatchRunner):
    """This is a simple example custom abnormal inputs test.

    This example custom abnormal inputs test returns true for all rows in the eval set
    whose numerical value for any column is outside the range of the reference set
    for the specified column.
    You must implement `abnormal_input_criteria` and `batch_test_name` for this test to
    work.
    """

    @classmethod
    def abnormal_inputs_criteria(
        cls, ref_set: pd.DataFrame, eval_set: pd.DataFrame
    ) -> pd.Series:
        """Return booleans `pd.Series` with same length as `eval_set`."""
        # get columns with only numerical values
        column_flags = ref_set.apply(
            lambda s: pd.to_numeric(s, errors="coerce").notnull().all()
        )
        result = pd.Series(np.zeros(len(eval_set), dtype=bool))
        for i, column in enumerate(ref_set.columns):
            if column_flags[i]:
                below_threshold = eval_set[column] < ref_set[column].min()
                above_threshold = eval_set[column] > ref_set[column].max()
                failing_rows = below_threshold | above_threshold
                result |= failing_rows

        return result

    @property
    def batch_test_name(self) -> str:
        """Return name of test."""
        return "Simple Custom Outside Range"


```

The following optional methods can have their implementation overridden.

* `get_batch_args`: Takes in reference and evaluation dataframes and returns a list of 
    keyword arguments to each run of your test. Implement this logic to run the same 
    abnormal input criteria over several tests with different arguments. `column_names` 
    is a required key in each dictionary with the corresponding value of a list of the 
    column names that this test uses. RIME uses this value to help flag features. All 
    other arguments pass to the implementation of `abnormal_inputs_criteria`. The 
    arguments must avoid name collisions with the keys in the `params` dictionary of 
    the configuration.
* `description`: Returns a short description of the test as a string.
* `starter_string`: Returns a longer description of the test as a string.
* `why_string`: Returns a string that explains why this test is useful.
* `configuration_string`: Returns a string describing the configuration of the test.
* `example_string`: Returns a string that gives an example of the use-case of this test.

Each of the strings can be formatted with HTML. The `starter_string`, `why_string`, `configuration_string`, and `example_stirng` properties are displayed in the "â“˜ More" pop-up.

```python
"""Advanced custom abnormal inputs test example."""
from typing import List

import pandas as pd

from rime.tabular.data_tests.custom.abnormal_inputs import (
    AbstractCustomAbnormalInputsBatchRunner,
)


class CustomAbnormalInputsBatchRunner(AbstractCustomAbnormalInputsBatchRunner):
    """This is an advanced example custom abnormal inputs test.

    This example custom abnormal inputs test runs a batch of tests where each test
    checks the evaluation data for numerical values that are outside the range of the
    In addition to the methods required by the simple example, you need to implement
    `get_batch_args`. Other functions are optional but helpful for
     interpreting the results from RIME.
    """

    @classmethod
    def abnormal_inputs_criteria(
        cls, ref_set: pd.DataFrame, eval_set: pd.DataFrame, column: str
    ) -> pd.Series:
        """Return booleans `pd.Series` with same length as `eval_set`."""
        min_val = ref_set[column].min()
        max_val = ref_set[column].max()
        return (eval_set[column] < min_val) | (eval_set[column] > max_val)

    @property
    def batch_test_name(self) -> str:
        """Return name of test."""
        return "Advanced Custom Outside Range"

    @classmethod
    def get_batch_args(
        cls, ref_set: pd.DataFrame, eval_set: pd.DataFrame
    ) -> List[dict]:
        """Return a list of kwargs to pass to each test.

        The `column_names` key is required and expects a list of column names that this
        test uses. All other kwargs are passed to `abnormal_inputs_criteria`.
        """
        column_flags = ref_set.apply(
            lambda s: pd.to_numeric(s, errors="coerce").notnull().all()
        )
        batch_args = []
        for i, column in enumerate(ref_set.columns):
            if column_flags[i]:
                batch_args.append({"column_names": [column], "column": column})
        return batch_args

    @property
    def description(self) -> str:
        """Return one sentence description of the test."""
        description = (
            "This test checks that the numeric features of the data points of the eval "
            "set are in the range of the numeric features of the data points of the "
            "reference set."
        )
        return description
```
