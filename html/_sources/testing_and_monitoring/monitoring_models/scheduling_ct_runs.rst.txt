Scheduling Continuous Testing runs
==================================

You can create and update the schedule for a Continuous Test from the SDK or the UI. For
more configuration information, see the Configuring your Scheduled Continuous Tests page.

Activating a schedule for a Continuous Test
--------------------------------------------

.. tabs::

   .. tab:: SDK

      **Create a new Continuous Test with a schedule**

      You can set a schedule at the same time you :ref:`create a Continuous Test<continuous-test>`. To create a
      schedule, specify a data source as well as any credentials required for access to the
      data source.

      1. :ref:`Create a project<creating-project>`

      2. Determine the IDs for the model and dataset in the project Registry.
         Optionally, provide parameters to process this data, such as timestamp column names.

          .. code-block:: python

              data_params_dict = {
                  "nrows": 100
              }

      3. Create a firewall with an active schedule. The data loaded has a timestamp column defined above.

          .. code-block:: python

              firewall = project.create_firewall(model_id, ref_data_id, timedelta(days=2))

         Since each data location requires specific parameters for the testing engine to access and
         process the data, see the Configuring your Scheduled Continuous Tests page
         for details about configurations for different use cases.

      **Activating a schedule on an existing Continuous Test**

      1. Get the Continuous Test from the project.

            .. code-block:: python

              firewall = rime_client.get_firewall_for_project("foo-project")

      2. Activate a schedule for the Continuous Test.

            .. code-block:: python

                firewall.activate_ct_schedule(location_type="data_collector", reference_set_window=reference_set_bin, data_params=data_params_dict)

   .. tab:: Web UI

      1. Choose an integration to use as a data source. The current supported options are Databricks Delta Lake, the Data Collector, or a custom data loader.

      2. Specify a table and timestamp column.

        .. image:: ../../_static/fw_deltalake.png

      3. For the custom loader, specify the path of the custom loading file, the name of the
      function that loads the data, any relevant keyword arguments in JSON format, and the
      timestamp column.

        .. image:: ../../_static/fw_custom_loader.png

Deactivating a schedule for a Continuous Test
----------------------------------------------

.. tabs::

   .. tab:: SDK

      .. code-block:: python

            firewall.deactivate_ct_schedule()

   .. tab:: Web UI

Updating the reference dataset
------------------------------

In addition to specifying access and process parameters, you can also modify the
reference data that tests are routinely run against.

A Continuous Test run can use a registered dataset, a rolling time
window, or a specific time period.

From the UI, choose a reference dataset in the "Reference Set" dropdown and fill in the relevant fields.
For the non-default options, the reference dataset always comes from the same data source that is specified for CT scheduling.

You can also specify the reference dataset from the SDK.

.. code-block:: python

    from datetime import datetime, timedelta

    # Specify a duration for the rolling window.
    # The reference set will change each period based on the window size
    rolling_window_period = timedelta(days=1)
    firewall.activate_ct_schedule(location_type="data_collector", rolling_window_duration=rolling_window_period)

    # Specify a new time period as the reference set
    reference_start_time = datetime(2022, 1, 3)
    reference_end_time = datetime(2021, 1, 3)
    reference_set_bin = (reference_start_time, reference_end_time)
    firewall.activate_ct_schedule(location_type="data_collector", reference_set_window=reference_set_bin)

Updating existing schedules
---------------------------

To change the data location associated with your runs or the reference set, use the `update_location_info`
function.

.. code-block:: python

    from datetime import datetime

    # Specify a new time period as the reference set
    reference_start_time = datetime(2022, 1, 3)
    reference_end_time = datetime(2021, 1, 3)
    reference_set_bin = (reference_start_time, reference_end_time)
    firewall.update_location_info(location_type="data_collector", reference_set_time_bin=reference_set_bin)
